

Microchip Technology PIC18 LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Oct  3 21:03:00 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	18F2550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    25                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    26                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    27  0000                     _ADCON1bits	set	4033
    28  0000                     _INTCON2bits	set	4081
    29  0000                     _INTCONbits	set	4082
    30  0000                     _PORTAbits	set	3968
    31  0000                     _PORTB	set	3969
    32  0000                     _RCONbits	set	4048
    33  0000                     _T0CONbits	set	4053
    34  0000                     _TRISA	set	3986
    35  0000                     _TRISAbits	set	3986
    36  0000                     _TRISB	set	3987
    37  0000                     _TRISC	set	3988
    38  0000                     _PORTA	set	3968
    39                           
    40                           ; #config settings
    41  0000                     
    42                           	psect	cinit
    43  0006BA                     __pcinit:
    44                           	opt stack 0
    45  0006BA                     start_initialization:
    46                           	opt stack 0
    47  0006BA                     __initialization:
    48                           	opt stack 0
    49                           
    50                           ; Clear objects allocated to COMRAM (29 bytes)
    51  0006BA  EE00  F024         	lfsr	0,__pbssCOMRAM
    52  0006BE  0E1D               	movlw	29
    53  0006C0                     clear_0:
    54  0006C0  6AEE               	clrf	postinc0,c
    55  0006C2  06E8               	decf	wreg,f,c
    56  0006C4  E1FD               	bnz	clear_0
    57  0006C6                     end_of_initialization:
    58                           	opt stack 0
    59  0006C6                     __end_of__initialization:
    60                           	opt stack 0
    61  0006C6  9041               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    62  0006C8  9241               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    63  0006CA  0E00               	movlw	low (__Lmediumconst shr (0+16))
    64  0006CC  6EF8               	movwf	tblptru,c
    65  0006CE  0100               	movlb	0
    66  0006D0  EFE6  F000         	goto	_main	;jump to C main() function
    67                           tblptru	equ	0xFF8
    68                           postinc0	equ	0xFEE
    69                           wreg	equ	0xFE8
    70                           
    71                           	psect	bssCOMRAM
    72  000024                     __pbssCOMRAM:
    73                           	opt stack 0
    74  000024                     _change:
    75                           	opt stack 0
    76  000024                     	ds	1
    77  000025                     _currentSeg:
    78                           	opt stack 0
    79  000025                     	ds	1
    80  000026                     _score_1:
    81                           	opt stack 0
    82  000026                     	ds	1
    83  000027                     _score_2:
    84                           	opt stack 0
    85  000027                     	ds	1
    86  000028                     _segmentCnt:
    87                           	opt stack 0
    88  000028                     	ds	1
    89  000029                     _segments:
    90                           	opt stack 0
    91  000029                     	ds	24
    92                           tblptru	equ	0xFF8
    93                           postinc0	equ	0xFEE
    94                           wreg	equ	0xFE8
    95                           
    96                           	psect	cstackCOMRAM
    97  000001                     __pcstackCOMRAM:
    98                           	opt stack 0
    99  000001                     ??_selectNextSegment:
   100  000001                     
   101                           ; 1 bytes @ 0x0
   102  000001                     	ds	2
   103  000003                     selectNextSegment@select:
   104                           	opt stack 0
   105                           
   106                           ; 1 bytes @ 0x2
   107  000003                     	ds	1
   108  000004                     ??_LowInterruptRoutine:
   109                           
   110                           ; 1 bytes @ 0x3
   111  000004                     	ds	18
   112  000016                     ??_determineWinner:
   113  000016                     ?___awdiv:
   114                           	opt stack 0
   115  000016                     ?___awmod:
   116                           	opt stack 0
   117  000016                     convertValueToSegment@segment:
   118                           	opt stack 0
   119  000016                     D_SEG_Add@port:
   120                           	opt stack 0
   121  000016                     delay@ms:
   122                           	opt stack 0
   123  000016                     ___awdiv@dividend:
   124                           	opt stack 0
   125  000016                     ___awmod@dividend:
   126                           	opt stack 0
   127                           
   128                           ; 2 bytes @ 0x15
   129  000016                     	ds	2
   130  000018                     ??_delay:
   131  000018                     convertValueToSegment@data:
   132                           	opt stack 0
   133  000018                     D_SEG_Add@portPin:
   134                           	opt stack 0
   135  000018                     ___awdiv@divisor:
   136                           	opt stack 0
   137  000018                     ___awmod@divisor:
   138                           	opt stack 0
   139                           
   140                           ; 2 bytes @ 0x17
   141  000018                     	ds	1
   142  000019                     delay@i:
   143                           	opt stack 0
   144                           
   145                           ; 2 bytes @ 0x18
   146  000019                     	ds	1
   147  00001A                     D_SEG_Add@ID:
   148                           	opt stack 0
   149  00001A                     ___awdiv@counter:
   150                           	opt stack 0
   151  00001A                     ___awmod@counter:
   152                           	opt stack 0
   153                           
   154                           ; 1 bytes @ 0x19
   155  00001A                     	ds	1
   156  00001B                     D_SEG_Add@i:
   157                           	opt stack 0
   158  00001B                     ___awdiv@sign:
   159                           	opt stack 0
   160  00001B                     ___awmod@sign:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0x1A
   164  00001B                     	ds	1
   165  00001C                     ___awdiv@quotient:
   166                           	opt stack 0
   167  00001C                     D_SEG_Add@temp:
   168                           	opt stack 0
   169                           
   170                           ; 6 bytes @ 0x1B
   171  00001C                     	ds	2
   172  00001E                     D_SEG_Update@value:
   173                           	opt stack 0
   174                           
   175                           ; 1 bytes @ 0x1D
   176  00001E                     	ds	1
   177  00001F                     D_SEG_Update@which:
   178                           	opt stack 0
   179                           
   180                           ; 1 bytes @ 0x1E
   181  00001F                     	ds	1
   182  000020                     setSegments@value:
   183                           	opt stack 0
   184                           
   185                           ; 1 bytes @ 0x1F
   186  000020                     	ds	1
   187  000021                     setSegments@player:
   188                           	opt stack 0
   189                           
   190                           ; 1 bytes @ 0x20
   191  000021                     	ds	1
   192  000022                     updateScore@how:
   193                           	opt stack 0
   194                           
   195                           ; 1 bytes @ 0x21
   196  000022                     	ds	1
   197  000023                     updateScore@which:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0x22
   201  000023                     	ds	1
   202  000024                     tblptru	equ	0xFF8
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           
   206                           ; 1 bytes @ 0x23
   207 ;;
   208 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   209 ;;
   210 ;; *************** function _main *****************
   211 ;; Defined at:
   212 ;;		line 48 in file "Main.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   226 ;;      Params:         0       0       0       0       0       0       0       0       0
   227 ;;      Locals:         0       0       0       0       0       0       0       0       0
   228 ;;      Temps:          0       0       0       0       0       0       0       0       0
   229 ;;      Totals:         0       0       0       0       0       0       0       0       0
   230 ;;Total ram usage:        0 bytes
   231 ;; Hardware stack levels required when called:    7
   232 ;; This function calls:
   233 ;;		_D_SEG_Add
   234 ;;		_D_SEG_Init
   235 ;;		_D_SEG_Start
   236 ;;		_D_SEG_Update
   237 ;;		_checkInputs
   238 ;;		_determineWinner
   239 ;;		_updateScore
   240 ;; This function is called by:
   241 ;;		Startup code after reset
   242 ;; This function uses a non-reentrant model
   243 ;;
   244                           
   245                           	psect	text0
   246  0001CC                     __ptext0:
   247                           	opt stack 0
   248  0001CC                     _main:
   249                           	opt stack 24
   250                           
   251                           ;Main.c: 50: TRISA = 0;
   252                           
   253                           ;incstack = 0
   254  0001CC  0E00               	movlw	0
   255  0001CE  6E92               	movwf	3986,c	;volatile
   256                           
   257                           ;Main.c: 51: TRISB = 0;
   258  0001D0  0E00               	movlw	0
   259  0001D2  6E93               	movwf	3987,c	;volatile
   260                           
   261                           ;Main.c: 52: TRISC = 0;
   262  0001D4  0E00               	movlw	0
   263  0001D6  6E94               	movwf	3988,c	;volatile
   264                           
   265                           ;Main.c: 53: ADCON1bits.PCFG = 0b1111;
   266  0001D8  80C1               	bsf	4033,0,c	;volatile
   267  0001DA  82C1               	bsf	4033,1,c	;volatile
   268  0001DC  84C1               	bsf	4033,2,c	;volatile
   269  0001DE  86C1               	bsf	4033,3,c	;volatile
   270                           
   271                           ;Main.c: 55: score_1 = 0;
   272  0001E0  0E00               	movlw	0
   273  0001E2  6E26               	movwf	_score_1,c
   274                           
   275                           ;Main.c: 56: score_2 = 0;
   276  0001E4  0E00               	movlw	0
   277  0001E6  6E27               	movwf	_score_2,c
   278                           
   279                           ;Main.c: 58: D_SEG_Init();
   280  0001E8  EC27  F003         	call	_D_SEG_Init	;wreg free
   281                           
   282                           ;Main.c: 59: D_SEG_Add(0x00, &PORTA, 2);
   283  0001EC  0E80               	movlw	128
   284  0001EE  6E16               	movwf	D_SEG_Add@port,c
   285  0001F0  0E0F               	movlw	15
   286  0001F2  6E17               	movwf	D_SEG_Add@port+1,c
   287  0001F4  0E02               	movlw	2
   288  0001F6  6E18               	movwf	D_SEG_Add@portPin,c
   289  0001F8  0E00               	movlw	0
   290  0001FA  EC94  F002         	call	_D_SEG_Add
   291                           
   292                           ;Main.c: 60: D_SEG_Add(0x01, &PORTA, 3);
   293  0001FE  0E80               	movlw	128
   294  000200  6E16               	movwf	D_SEG_Add@port,c
   295  000202  0E0F               	movlw	15
   296  000204  6E17               	movwf	D_SEG_Add@port+1,c
   297  000206  0E03               	movlw	3
   298  000208  6E18               	movwf	D_SEG_Add@portPin,c
   299  00020A  0E01               	movlw	1
   300  00020C  EC94  F002         	call	_D_SEG_Add
   301                           
   302                           ;Main.c: 61: D_SEG_Add(0x02, &PORTA, 4);
   303  000210  0E80               	movlw	128
   304  000212  6E16               	movwf	D_SEG_Add@port,c
   305  000214  0E0F               	movlw	15
   306  000216  6E17               	movwf	D_SEG_Add@port+1,c
   307  000218  0E04               	movlw	4
   308  00021A  6E18               	movwf	D_SEG_Add@portPin,c
   309  00021C  0E02               	movlw	2
   310  00021E  EC94  F002         	call	_D_SEG_Add
   311                           
   312                           ;Main.c: 62: D_SEG_Add(0x03, &PORTA, 5);
   313  000222  0E80               	movlw	128
   314  000224  6E16               	movwf	D_SEG_Add@port,c
   315  000226  0E0F               	movlw	15
   316  000228  6E17               	movwf	D_SEG_Add@port+1,c
   317  00022A  0E05               	movlw	5
   318  00022C  6E18               	movwf	D_SEG_Add@portPin,c
   319  00022E  0E03               	movlw	3
   320  000230  EC94  F002         	call	_D_SEG_Add
   321                           
   322                           ;Main.c: 64: D_SEG_Start();
   323  000234  EC6A  F003         	call	_D_SEG_Start	;wreg free
   324                           
   325                           ;Main.c: 66: D_SEG_Update(0x00, 0);
   326  000238  0E00               	movlw	0
   327  00023A  6E1E               	movwf	D_SEG_Update@value,c
   328  00023C  0E00               	movlw	0
   329  00023E  EC3A  F003         	call	_D_SEG_Update
   330                           
   331                           ;Main.c: 67: D_SEG_Update(0x01, 0);
   332  000242  0E00               	movlw	0
   333  000244  6E1E               	movwf	D_SEG_Update@value,c
   334  000246  0E01               	movlw	1
   335  000248  EC3A  F003         	call	_D_SEG_Update
   336                           
   337                           ;Main.c: 68: D_SEG_Update(0x02, 0);
   338  00024C  0E00               	movlw	0
   339  00024E  6E1E               	movwf	D_SEG_Update@value,c
   340  000250  0E02               	movlw	2
   341  000252  EC3A  F003         	call	_D_SEG_Update
   342                           
   343                           ;Main.c: 69: D_SEG_Update(0x03, 0);
   344  000256  0E00               	movlw	0
   345  000258  6E1E               	movwf	D_SEG_Update@value,c
   346  00025A  0E03               	movlw	3
   347  00025C  EC3A  F003         	call	_D_SEG_Update
   348                           
   349                           ;Main.c: 72: TRISAbits.TRISA0 = 1;
   350  000260  8092               	bsf	3986,0,c	;volatile
   351                           
   352                           ;Main.c: 73: TRISAbits.TRISA1 = 1;
   353  000262  8292               	bsf	3986,1,c	;volatile
   354                           
   355                           ;Main.c: 77: switch(checkInputs()) {
   356                           
   357                           ;Main.c: 75: while(1) {
   358  000264  D00C               	goto	l1341
   359  000266                     l1335:
   360                           
   361                           ;Main.c: 79: updateScore(0x01, 0x00);
   362  000266  0E00               	movlw	0
   363  000268  6E22               	movwf	updateScore@how,c
   364  00026A  0E01               	movlw	1
   365  00026C  ECE3  F001         	call	_updateScore
   366                           
   367                           ;Main.c: 80: break;
   368  000270  D01B               	goto	l1349
   369  000272                     l1337:
   370                           
   371                           ;Main.c: 83: updateScore(0x02, 0x00);
   372  000272  0E00               	movlw	0
   373  000274  6E22               	movwf	updateScore@how,c
   374  000276  0E02               	movlw	2
   375  000278  ECE3  F001         	call	_updateScore
   376                           
   377                           ;Main.c: 89: }
   378                           
   379                           ;Main.c: 84: break;
   380  00027C  D015               	goto	l1349
   381  00027E                     l1341:
   382  00027E  ECFD  F002         	call	_checkInputs	;wreg free
   383                           
   384                           ; Switch size 1, requested type "space"
   385                           ; Number of cases is 2, Range of values is 1 to 2
   386                           ; switch strategies available:
   387                           ; Name         Instructions Cycles
   388                           ; simple_byte            7     4 (average)
   389                           ;	Chosen strategy is simple_byte
   390  000282  0A01               	xorlw	1	; case 1
   391  000284  B4D8               	btfsc	status,2,c
   392  000286  D7EF               	goto	l1335
   393  000288  0A03               	xorlw	3	; case 2
   394  00028A  B4D8               	btfsc	status,2,c
   395  00028C  D7F2               	goto	l1337
   396                           
   397                           ;Main.c: 91: switch(determineWinner()) {
   398  00028E  D00C               	goto	l1349
   399  000290                     l1343:
   400                           
   401                           ;Main.c: 94: updateScore(0x01, 0x02);
   402  000290  0E02               	movlw	2
   403  000292  6E22               	movwf	updateScore@how,c
   404  000294  0E01               	movlw	1
   405  000296  ECE3  F001         	call	_updateScore
   406                           
   407                           ;Main.c: 95: break;
   408  00029A  D7F1               	goto	l1341
   409  00029C                     l1345:
   410                           
   411                           ;Main.c: 99: updateScore(0x02, 0x02);
   412  00029C  0E02               	movlw	2
   413  00029E  6E22               	movwf	updateScore@how,c
   414  0002A0  0E02               	movlw	2
   415  0002A2  ECE3  F001         	call	_updateScore
   416                           
   417                           ;Main.c: 103: }
   418                           
   419                           ;Main.c: 102: default: break;
   420                           
   421                           ;Main.c: 100: break;
   422  0002A6  D7EB               	goto	l1341
   423  0002A8                     l1349:
   424  0002A8  ECC9  F002         	call	_determineWinner	;wreg free
   425                           
   426                           ; Switch size 1, requested type "space"
   427                           ; Number of cases is 2, Range of values is 1 to 2
   428                           ; switch strategies available:
   429                           ; Name         Instructions Cycles
   430                           ; simple_byte            7     4 (average)
   431                           ;	Chosen strategy is simple_byte
   432  0002AC  0A01               	xorlw	1	; case 1
   433  0002AE  B4D8               	btfsc	status,2,c
   434  0002B0  D7EF               	goto	l1343
   435  0002B2  0A03               	xorlw	3	; case 2
   436  0002B4  B4D8               	btfsc	status,2,c
   437  0002B6  D7F2               	goto	l1345
   438  0002B8  D7E2               	goto	l1341
   439  0002BA                     __end_of_main:
   440                           	opt stack 0
   441                           tblptru	equ	0xFF8
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           status	equ	0xFD8
   445                           
   446 ;; *************** function _updateScore *****************
   447 ;; Defined at:
   448 ;;		line 108 in file "Main.c"
   449 ;; Parameters:    Size  Location     Type
   450 ;;  which           1    wreg     unsigned char 
   451 ;;  how             1   33[COMRAM] unsigned char 
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  which           1   34[COMRAM] unsigned char 
   454 ;; Return value:  Size  Location     Type
   455 ;;                  1    wreg      void 
   456 ;; Registers used:
   457 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   458 ;; Tracked objects:
   459 ;;		On entry : 0/0
   460 ;;		On exit  : 0/0
   461 ;;		Unchanged: 0/0
   462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   463 ;;      Params:         1       0       0       0       0       0       0       0       0
   464 ;;      Locals:         1       0       0       0       0       0       0       0       0
   465 ;;      Temps:          0       0       0       0       0       0       0       0       0
   466 ;;      Totals:         2       0       0       0       0       0       0       0       0
   467 ;;Total ram usage:        2 bytes
   468 ;; Hardware stack levels used:    1
   469 ;; Hardware stack levels required when called:    6
   470 ;; This function calls:
   471 ;;		_setSegments
   472 ;; This function is called by:
   473 ;;		_main
   474 ;; This function uses a non-reentrant model
   475 ;;
   476                           
   477                           	psect	text1
   478  0003C6                     __ptext1:
   479                           	opt stack 0
   480  0003C6                     _updateScore:
   481                           	opt stack 24
   482                           
   483                           ;incstack = 0
   484                           ;updateScore@which stored from wreg
   485  0003C6  6E23               	movwf	updateScore@which,c
   486                           
   487                           ;Main.c: 109: switch(which) {
   488  0003C8  D034               	goto	l1289
   489  0003CA                     l1259:
   490                           
   491                           ;Main.c: 113: score_1++;
   492  0003CA  2A26               	incf	_score_1,f,c
   493                           
   494                           ;Main.c: 114: break;
   495  0003CC  D012               	goto	l1271
   496  0003CE                     l1261:
   497                           
   498                           ;Main.c: 116: if (score_1 > 0) score_1--;
   499  0003CE  5026               	movf	_score_1,w,c
   500  0003D0  B4D8               	btfsc	status,2,c
   501  0003D2  D00F               	goto	l1271
   502  0003D4  0626               	decf	_score_1,f,c
   503                           
   504                           ;Main.c: 117: break;
   505  0003D6  D00D               	goto	l1271
   506  0003D8                     l1265:
   507                           
   508                           ;Main.c: 119: score_1 = 0;
   509  0003D8  0E00               	movlw	0
   510  0003DA  6E26               	movwf	_score_1,c
   511                           
   512                           ;Main.c: 122: }
   513                           
   514                           ;Main.c: 121: default: break;
   515                           
   516                           ;Main.c: 120: break;
   517  0003DC  D00A               	goto	l1271
   518  0003DE                     l1269:
   519  0003DE  5022               	movf	updateScore@how,w,c
   520                           
   521                           ; Switch size 1, requested type "space"
   522                           ; Number of cases is 3, Range of values is 0 to 2
   523                           ; switch strategies available:
   524                           ; Name         Instructions Cycles
   525                           ; simple_byte           10     6 (average)
   526                           ;	Chosen strategy is simple_byte
   527  0003E0  0A00               	xorlw	0	; case 0
   528  0003E2  B4D8               	btfsc	status,2,c
   529  0003E4  D7F2               	goto	l1259
   530  0003E6  0A01               	xorlw	1	; case 1
   531  0003E8  B4D8               	btfsc	status,2,c
   532  0003EA  D7F1               	goto	l1261
   533  0003EC  0A03               	xorlw	3	; case 2
   534  0003EE  B4D8               	btfsc	status,2,c
   535  0003F0  D7F3               	goto	l1265
   536  0003F2                     l1271:
   537                           
   538                           ;Main.c: 123: setSegments(0x01, score_1);
   539  0003F2  C026  F020         	movff	_score_1,setSegments@value
   540  0003F6  0E01               	movlw	1
   541  0003F8  EC5D  F001         	call	_setSegments
   542                           
   543                           ;Main.c: 124: break;
   544  0003FC  0012               	return	
   545  0003FE                     l1273:
   546                           
   547                           ;Main.c: 129: score_2++;
   548  0003FE  2A27               	incf	_score_2,f,c
   549                           
   550                           ;Main.c: 130: break;
   551  000400  D012               	goto	l1285
   552  000402                     l1275:
   553                           
   554                           ;Main.c: 132: if (score_2 > 0) score_2--;
   555  000402  5027               	movf	_score_2,w,c
   556  000404  B4D8               	btfsc	status,2,c
   557  000406  D00F               	goto	l1285
   558  000408  0627               	decf	_score_2,f,c
   559                           
   560                           ;Main.c: 133: break;
   561  00040A  D00D               	goto	l1285
   562  00040C                     l1279:
   563                           
   564                           ;Main.c: 135: score_2 = 0;
   565  00040C  0E00               	movlw	0
   566  00040E  6E27               	movwf	_score_2,c
   567                           
   568                           ;Main.c: 138: }
   569                           
   570                           ;Main.c: 137: default: break;
   571                           
   572                           ;Main.c: 136: break;
   573  000410  D00A               	goto	l1285
   574  000412                     l1283:
   575  000412  5022               	movf	updateScore@how,w,c
   576                           
   577                           ; Switch size 1, requested type "space"
   578                           ; Number of cases is 3, Range of values is 0 to 2
   579                           ; switch strategies available:
   580                           ; Name         Instructions Cycles
   581                           ; simple_byte           10     6 (average)
   582                           ;	Chosen strategy is simple_byte
   583  000414  0A00               	xorlw	0	; case 0
   584  000416  B4D8               	btfsc	status,2,c
   585  000418  D7F2               	goto	l1273
   586  00041A  0A01               	xorlw	1	; case 1
   587  00041C  B4D8               	btfsc	status,2,c
   588  00041E  D7F1               	goto	l1275
   589  000420  0A03               	xorlw	3	; case 2
   590  000422  B4D8               	btfsc	status,2,c
   591  000424  D7F3               	goto	l1279
   592  000426                     l1285:
   593                           
   594                           ;Main.c: 139: setSegments(0x02, score_2);
   595  000426  C027  F020         	movff	_score_2,setSegments@value
   596  00042A  0E02               	movlw	2
   597  00042C  EC5D  F001         	call	_setSegments
   598                           
   599                           ;Main.c: 143: }
   600                           
   601                           ;Main.c: 142: default: break;
   602                           
   603                           ;Main.c: 140: break;
   604  000430  0012               	return	
   605  000432                     l1289:
   606  000432  5023               	movf	updateScore@which,w,c
   607                           
   608                           ; Switch size 1, requested type "space"
   609                           ; Number of cases is 2, Range of values is 1 to 2
   610                           ; switch strategies available:
   611                           ; Name         Instructions Cycles
   612                           ; simple_byte            7     4 (average)
   613                           ;	Chosen strategy is simple_byte
   614  000434  0A01               	xorlw	1	; case 1
   615  000436  B4D8               	btfsc	status,2,c
   616  000438  D7D2               	goto	l1269
   617  00043A  0A03               	xorlw	3	; case 2
   618  00043C  A4D8               	btfss	status,2,c
   619  00043E  0012               	return	
   620  000440  D7E8               	goto	l1283
   621  000442                     __end_of_updateScore:
   622                           	opt stack 0
   623                           tblptru	equ	0xFF8
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           status	equ	0xFD8
   627                           
   628 ;; *************** function _setSegments *****************
   629 ;; Defined at:
   630 ;;		line 162 in file "Main.c"
   631 ;; Parameters:    Size  Location     Type
   632 ;;  player          1    wreg     unsigned char 
   633 ;;  value           1   31[COMRAM] unsigned char 
   634 ;; Auto vars:     Size  Location     Type
   635 ;;  player          1   32[COMRAM] unsigned char 
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   645 ;;      Params:         1       0       0       0       0       0       0       0       0
   646 ;;      Locals:         1       0       0       0       0       0       0       0       0
   647 ;;      Temps:          0       0       0       0       0       0       0       0       0
   648 ;;      Totals:         2       0       0       0       0       0       0       0       0
   649 ;;Total ram usage:        2 bytes
   650 ;; Hardware stack levels used:    1
   651 ;; Hardware stack levels required when called:    5
   652 ;; This function calls:
   653 ;;		_D_SEG_Update
   654 ;;		___awdiv
   655 ;;		___awmod
   656 ;; This function is called by:
   657 ;;		_updateScore
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text2
   662  0002BA                     __ptext2:
   663                           	opt stack 0
   664  0002BA                     _setSegments:
   665                           	opt stack 24
   666                           
   667                           ;incstack = 0
   668                           ;setSegments@player stored from wreg
   669  0002BA  6E21               	movwf	setSegments@player,c
   670                           
   671                           ;Main.c: 163: switch(player) {
   672  0002BC  D03A               	goto	l1225
   673  0002BE                     l1219:
   674                           
   675                           ;Main.c: 165: D_SEG_Update(0x00, value%10);
   676  0002BE  C020  F016         	movff	setSegments@value,___awmod@dividend
   677  0002C2  6A17               	clrf	___awmod@dividend+1,c
   678  0002C4  0E00               	movlw	0
   679  0002C6  6E19               	movwf	___awmod@divisor+1,c
   680  0002C8  0E0A               	movlw	10
   681  0002CA  6E18               	movwf	___awmod@divisor,c
   682  0002CC  EC5C  F002         	call	___awmod	;wreg free
   683  0002D0  5016               	movf	?___awmod,w,c
   684  0002D2  6E1E               	movwf	D_SEG_Update@value,c
   685  0002D4  0E00               	movlw	0
   686  0002D6  EC3A  F003         	call	_D_SEG_Update
   687                           
   688                           ;Main.c: 166: D_SEG_Update(0x01, value/10);
   689  0002DA  C020  F016         	movff	setSegments@value,___awdiv@dividend
   690  0002DE  6A17               	clrf	___awdiv@dividend+1,c
   691  0002E0  0E00               	movlw	0
   692  0002E2  6E19               	movwf	___awdiv@divisor+1,c
   693  0002E4  0E0A               	movlw	10
   694  0002E6  6E18               	movwf	___awdiv@divisor,c
   695  0002E8  ECA1  F001         	call	___awdiv	;wreg free
   696  0002EC  5016               	movf	?___awdiv,w,c
   697  0002EE  6E1E               	movwf	D_SEG_Update@value,c
   698  0002F0  0E01               	movlw	1
   699  0002F2  EC3A  F003         	call	_D_SEG_Update
   700                           
   701                           ;Main.c: 167: break;
   702  0002F6  0012               	return	
   703  0002F8                     l1221:
   704                           
   705                           ;Main.c: 170: D_SEG_Update(0x02, value%10);
   706  0002F8  C020  F016         	movff	setSegments@value,___awmod@dividend
   707  0002FC  6A17               	clrf	___awmod@dividend+1,c
   708  0002FE  0E00               	movlw	0
   709  000300  6E19               	movwf	___awmod@divisor+1,c
   710  000302  0E0A               	movlw	10
   711  000304  6E18               	movwf	___awmod@divisor,c
   712  000306  EC5C  F002         	call	___awmod	;wreg free
   713  00030A  5016               	movf	?___awmod,w,c
   714  00030C  6E1E               	movwf	D_SEG_Update@value,c
   715  00030E  0E02               	movlw	2
   716  000310  EC3A  F003         	call	_D_SEG_Update
   717                           
   718                           ;Main.c: 171: D_SEG_Update(0x03, value/10);
   719  000314  C020  F016         	movff	setSegments@value,___awdiv@dividend
   720  000318  6A17               	clrf	___awdiv@dividend+1,c
   721  00031A  0E00               	movlw	0
   722  00031C  6E19               	movwf	___awdiv@divisor+1,c
   723  00031E  0E0A               	movlw	10
   724  000320  6E18               	movwf	___awdiv@divisor,c
   725  000322  ECA1  F001         	call	___awdiv	;wreg free
   726  000326  5016               	movf	?___awdiv,w,c
   727  000328  6E1E               	movwf	D_SEG_Update@value,c
   728  00032A  0E03               	movlw	3
   729  00032C  EC3A  F003         	call	_D_SEG_Update
   730                           
   731                           ;Main.c: 175: }
   732                           
   733                           ;Main.c: 174: default: break;
   734                           
   735                           ;Main.c: 172: break;
   736  000330  0012               	return	
   737  000332                     l1225:
   738  000332  5021               	movf	setSegments@player,w,c
   739                           
   740                           ; Switch size 1, requested type "space"
   741                           ; Number of cases is 2, Range of values is 1 to 2
   742                           ; switch strategies available:
   743                           ; Name         Instructions Cycles
   744                           ; simple_byte            7     4 (average)
   745                           ;	Chosen strategy is simple_byte
   746  000334  0A01               	xorlw	1	; case 1
   747  000336  B4D8               	btfsc	status,2,c
   748  000338  D7C2               	goto	l1219
   749  00033A  0A03               	xorlw	3	; case 2
   750  00033C  A4D8               	btfss	status,2,c
   751  00033E  0012               	return	
   752  000340  D7DB               	goto	l1221
   753  000342                     __end_of_setSegments:
   754                           	opt stack 0
   755                           tblptru	equ	0xFF8
   756                           postinc0	equ	0xFEE
   757                           wreg	equ	0xFE8
   758                           status	equ	0xFD8
   759                           
   760 ;; *************** function ___awmod *****************
   761 ;; Defined at:
   762 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/awmod.c"
   763 ;; Parameters:    Size  Location     Type
   764 ;;  dividend        2   21[COMRAM] int 
   765 ;;  divisor         2   23[COMRAM] int 
   766 ;; Auto vars:     Size  Location     Type
   767 ;;  sign            1   26[COMRAM] unsigned char 
   768 ;;  counter         1   25[COMRAM] unsigned char 
   769 ;; Return value:  Size  Location     Type
   770 ;;                  2   21[COMRAM] int 
   771 ;; Registers used:
   772 ;;		wreg, status,2, status,0
   773 ;; Tracked objects:
   774 ;;		On entry : 0/0
   775 ;;		On exit  : 0/0
   776 ;;		Unchanged: 0/0
   777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   778 ;;      Params:         4       0       0       0       0       0       0       0       0
   779 ;;      Locals:         2       0       0       0       0       0       0       0       0
   780 ;;      Temps:          0       0       0       0       0       0       0       0       0
   781 ;;      Totals:         6       0       0       0       0       0       0       0       0
   782 ;;Total ram usage:        6 bytes
   783 ;; Hardware stack levels used:    1
   784 ;; Hardware stack levels required when called:    3
   785 ;; This function calls:
   786 ;;		Nothing
   787 ;; This function is called by:
   788 ;;		_setSegments
   789 ;; This function uses a non-reentrant model
   790 ;;
   791                           
   792                           	psect	text3
   793  0004B8                     __ptext3:
   794                           	opt stack 0
   795  0004B8                     ___awmod:
   796                           	opt stack 25
   797                           
   798                           ;incstack = 0
   799  0004B8  0E00               	movlw	0
   800  0004BA  6E1B               	movwf	___awmod@sign,c
   801  0004BC  AE17               	btfss	___awmod@dividend+1,7,c
   802  0004BE  D006               	goto	l1189
   803  0004C0  6C16               	negf	___awmod@dividend,c
   804  0004C2  1E17               	comf	___awmod@dividend+1,f,c
   805  0004C4  B0D8               	btfsc	status,0,c
   806  0004C6  2A17               	incf	___awmod@dividend+1,f,c
   807  0004C8  0E01               	movlw	1
   808  0004CA  6E1B               	movwf	___awmod@sign,c
   809  0004CC                     l1189:
   810  0004CC  AE19               	btfss	___awmod@divisor+1,7,c
   811  0004CE  D004               	goto	l1193
   812  0004D0  6C18               	negf	___awmod@divisor,c
   813  0004D2  1E19               	comf	___awmod@divisor+1,f,c
   814  0004D4  B0D8               	btfsc	status,0,c
   815  0004D6  2A19               	incf	___awmod@divisor+1,f,c
   816  0004D8                     l1193:
   817  0004D8  5018               	movf	___awmod@divisor,w,c
   818  0004DA  1019               	iorwf	___awmod@divisor+1,w,c
   819  0004DC  B4D8               	btfsc	status,2,c
   820  0004DE  D018               	goto	l1209
   821  0004E0  0E01               	movlw	1
   822  0004E2  6E1A               	movwf	___awmod@counter,c
   823  0004E4  D004               	goto	l1199
   824  0004E6                     l1197:
   825  0004E6  90D8               	bcf	status,0,c
   826  0004E8  3618               	rlcf	___awmod@divisor,f,c
   827  0004EA  3619               	rlcf	___awmod@divisor+1,f,c
   828  0004EC  2A1A               	incf	___awmod@counter,f,c
   829  0004EE                     l1199:
   830  0004EE  AE19               	btfss	___awmod@divisor+1,7,c
   831  0004F0  D7FA               	goto	l1197
   832  0004F2                     l1201:
   833  0004F2  5018               	movf	___awmod@divisor,w,c
   834  0004F4  5C16               	subwf	___awmod@dividend,w,c
   835  0004F6  5019               	movf	___awmod@divisor+1,w,c
   836  0004F8  5817               	subwfb	___awmod@dividend+1,w,c
   837  0004FA  A0D8               	btfss	status,0,c
   838  0004FC  D004               	goto	l1205
   839  0004FE  5018               	movf	___awmod@divisor,w,c
   840  000500  5E16               	subwf	___awmod@dividend,f,c
   841  000502  5019               	movf	___awmod@divisor+1,w,c
   842  000504  5A17               	subwfb	___awmod@dividend+1,f,c
   843  000506                     l1205:
   844  000506  90D8               	bcf	status,0,c
   845  000508  3219               	rrcf	___awmod@divisor+1,f,c
   846  00050A  3218               	rrcf	___awmod@divisor,f,c
   847  00050C  2E1A               	decfsz	___awmod@counter,f,c
   848  00050E  D7F1               	goto	l1201
   849  000510                     l1209:
   850  000510  501B               	movf	___awmod@sign,w,c
   851  000512  B4D8               	btfsc	status,2,c
   852  000514  D004               	goto	l1213
   853  000516  6C16               	negf	___awmod@dividend,c
   854  000518  1E17               	comf	___awmod@dividend+1,f,c
   855  00051A  B0D8               	btfsc	status,0,c
   856  00051C  2A17               	incf	___awmod@dividend+1,f,c
   857  00051E                     l1213:
   858  00051E  C016  F016         	movff	___awmod@dividend,?___awmod
   859  000522  C017  F017         	movff	___awmod@dividend+1,?___awmod+1
   860  000526  0012               	return	
   861  000528                     __end_of___awmod:
   862                           	opt stack 0
   863                           tblptru	equ	0xFF8
   864                           postinc0	equ	0xFEE
   865                           wreg	equ	0xFE8
   866                           status	equ	0xFD8
   867                           
   868 ;; *************** function ___awdiv *****************
   869 ;; Defined at:
   870 ;;		line 8 in file "/opt/microchip/xc8/v1.37/sources/common/awdiv.c"
   871 ;; Parameters:    Size  Location     Type
   872 ;;  dividend        2   21[COMRAM] int 
   873 ;;  divisor         2   23[COMRAM] int 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  quotient        2   27[COMRAM] int 
   876 ;;  sign            1   26[COMRAM] unsigned char 
   877 ;;  counter         1   25[COMRAM] unsigned char 
   878 ;; Return value:  Size  Location     Type
   879 ;;                  2   21[COMRAM] int 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   887 ;;      Params:         4       0       0       0       0       0       0       0       0
   888 ;;      Locals:         4       0       0       0       0       0       0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0       0       0
   890 ;;      Totals:         8       0       0       0       0       0       0       0       0
   891 ;;Total ram usage:        8 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    3
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_setSegments
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text4
   902  000342                     __ptext4:
   903                           	opt stack 0
   904  000342                     ___awdiv:
   905                           	opt stack 25
   906                           
   907                           ;incstack = 0
   908  000342  0E00               	movlw	0
   909  000344  6E1B               	movwf	___awdiv@sign,c
   910  000346  AE19               	btfss	___awdiv@divisor+1,7,c
   911  000348  D006               	goto	l1145
   912  00034A  6C18               	negf	___awdiv@divisor,c
   913  00034C  1E19               	comf	___awdiv@divisor+1,f,c
   914  00034E  B0D8               	btfsc	status,0,c
   915  000350  2A19               	incf	___awdiv@divisor+1,f,c
   916  000352  0E01               	movlw	1
   917  000354  6E1B               	movwf	___awdiv@sign,c
   918  000356                     l1145:
   919  000356  AE17               	btfss	___awdiv@dividend+1,7,c
   920  000358  D006               	goto	l1151
   921  00035A  6C16               	negf	___awdiv@dividend,c
   922  00035C  1E17               	comf	___awdiv@dividend+1,f,c
   923  00035E  B0D8               	btfsc	status,0,c
   924  000360  2A17               	incf	___awdiv@dividend+1,f,c
   925  000362  0E01               	movlw	1
   926  000364  1A1B               	xorwf	___awdiv@sign,f,c
   927  000366                     l1151:
   928  000366  0E00               	movlw	0
   929  000368  6E1D               	movwf	___awdiv@quotient+1,c
   930  00036A  0E00               	movlw	0
   931  00036C  6E1C               	movwf	___awdiv@quotient,c
   932  00036E  5018               	movf	___awdiv@divisor,w,c
   933  000370  1019               	iorwf	___awdiv@divisor+1,w,c
   934  000372  B4D8               	btfsc	status,2,c
   935  000374  D01C               	goto	l1173
   936  000376  0E01               	movlw	1
   937  000378  6E1A               	movwf	___awdiv@counter,c
   938  00037A  D004               	goto	l1159
   939  00037C                     l1157:
   940  00037C  90D8               	bcf	status,0,c
   941  00037E  3618               	rlcf	___awdiv@divisor,f,c
   942  000380  3619               	rlcf	___awdiv@divisor+1,f,c
   943  000382  2A1A               	incf	___awdiv@counter,f,c
   944  000384                     l1159:
   945  000384  AE19               	btfss	___awdiv@divisor+1,7,c
   946  000386  D7FA               	goto	l1157
   947  000388                     l1161:
   948  000388  90D8               	bcf	status,0,c
   949  00038A  361C               	rlcf	___awdiv@quotient,f,c
   950  00038C  361D               	rlcf	___awdiv@quotient+1,f,c
   951  00038E  5018               	movf	___awdiv@divisor,w,c
   952  000390  5C16               	subwf	___awdiv@dividend,w,c
   953  000392  5019               	movf	___awdiv@divisor+1,w,c
   954  000394  5817               	subwfb	___awdiv@dividend+1,w,c
   955  000396  A0D8               	btfss	status,0,c
   956  000398  D005               	goto	l1169
   957  00039A  5018               	movf	___awdiv@divisor,w,c
   958  00039C  5E16               	subwf	___awdiv@dividend,f,c
   959  00039E  5019               	movf	___awdiv@divisor+1,w,c
   960  0003A0  5A17               	subwfb	___awdiv@dividend+1,f,c
   961  0003A2  801C               	bsf	___awdiv@quotient,0,c
   962  0003A4                     l1169:
   963  0003A4  90D8               	bcf	status,0,c
   964  0003A6  3219               	rrcf	___awdiv@divisor+1,f,c
   965  0003A8  3218               	rrcf	___awdiv@divisor,f,c
   966  0003AA  2E1A               	decfsz	___awdiv@counter,f,c
   967  0003AC  D7ED               	goto	l1161
   968  0003AE                     l1173:
   969  0003AE  501B               	movf	___awdiv@sign,w,c
   970  0003B0  B4D8               	btfsc	status,2,c
   971  0003B2  D004               	goto	l1177
   972  0003B4  6C1C               	negf	___awdiv@quotient,c
   973  0003B6  1E1D               	comf	___awdiv@quotient+1,f,c
   974  0003B8  B0D8               	btfsc	status,0,c
   975  0003BA  2A1D               	incf	___awdiv@quotient+1,f,c
   976  0003BC                     l1177:
   977  0003BC  C01C  F016         	movff	___awdiv@quotient,?___awdiv
   978  0003C0  C01D  F017         	movff	___awdiv@quotient+1,?___awdiv+1
   979  0003C4  0012               	return	
   980  0003C6                     __end_of___awdiv:
   981                           	opt stack 0
   982                           tblptru	equ	0xFF8
   983                           postinc0	equ	0xFEE
   984                           wreg	equ	0xFE8
   985                           status	equ	0xFD8
   986                           
   987 ;; *************** function _D_SEG_Update *****************
   988 ;; Defined at:
   989 ;;		line 131 in file "Drivers/SEG_Driver.c"
   990 ;; Parameters:    Size  Location     Type
   991 ;;  which           1    wreg     unsigned char 
   992 ;;  value           1   29[COMRAM] unsigned char 
   993 ;; Auto vars:     Size  Location     Type
   994 ;;  which           1   30[COMRAM] unsigned char 
   995 ;; Return value:  Size  Location     Type
   996 ;;                  1    wreg      void 
   997 ;; Registers used:
   998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   999 ;; Tracked objects:
  1000 ;;		On entry : 0/0
  1001 ;;		On exit  : 0/0
  1002 ;;		Unchanged: 0/0
  1003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1004 ;;      Params:         1       0       0       0       0       0       0       0       0
  1005 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1006 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1007 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1008 ;;Total ram usage:        2 bytes
  1009 ;; Hardware stack levels used:    1
  1010 ;; Hardware stack levels required when called:    4
  1011 ;; This function calls:
  1012 ;;		_convertValueToSegment
  1013 ;; This function is called by:
  1014 ;;		_main
  1015 ;;		_setSegments
  1016 ;; This function uses a non-reentrant model
  1017 ;;
  1018                           
  1019                           	psect	text5
  1020  000674                     __ptext5:
  1021                           	opt stack 0
  1022  000674                     _D_SEG_Update:
  1023                           	opt stack 24
  1024                           
  1025                           ;incstack = 0
  1026                           ;D_SEG_Update@which stored from wreg
  1027  000674  6E1F               	movwf	D_SEG_Update@which,c
  1028                           
  1029                           ;SEG_Driver.c: 133: if(which < segmentCnt) {
  1030  000676  5028               	movf	_segmentCnt,w,c
  1031  000678  5C1F               	subwf	D_SEG_Update@which,w,c
  1032  00067A  B0D8               	btfsc	status,0,c
  1033  00067C  0012               	return	
  1034                           
  1035                           ;SEG_Driver.c: 134: convertValueToSegment(&segments[which], value);
  1036  00067E  501F               	movf	D_SEG_Update@which,w,c
  1037  000680  0D06               	mullw	6
  1038  000682  0E29               	movlw	low _segments
  1039  000684  24F3               	addwf	prodl,w,c
  1040  000686  6E16               	movwf	convertValueToSegment@segment,c
  1041  000688  0E00               	movlw	high _segments
  1042  00068A  20F4               	addwfc	prodh,w,c
  1043  00068C  6E17               	movwf	convertValueToSegment@segment+1,c
  1044  00068E  C01E  F018         	movff	D_SEG_Update@value,convertValueToSegment@data
  1045  000692  EC65  F000         	call	_convertValueToSegment	;wreg free
  1046  000696  0012               	return	
  1047  000698                     __end_of_D_SEG_Update:
  1048                           	opt stack 0
  1049                           tblptru	equ	0xFF8
  1050                           prodh	equ	0xFF4
  1051                           prodl	equ	0xFF3
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           status	equ	0xFD8
  1055                           
  1056 ;; *************** function _convertValueToSegment *****************
  1057 ;; Defined at:
  1058 ;;		line 48 in file "Drivers/SEG_Driver.c"
  1059 ;; Parameters:    Size  Location     Type
  1060 ;;  segment         2   21[COMRAM] PTR struct .
  1061 ;;		 -> segments(24), 
  1062 ;;  data            1   23[COMRAM] unsigned char 
  1063 ;; Auto vars:     Size  Location     Type
  1064 ;;		None
  1065 ;; Return value:  Size  Location     Type
  1066 ;;                  1    wreg      void 
  1067 ;; Registers used:
  1068 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1069 ;; Tracked objects:
  1070 ;;		On entry : 0/0
  1071 ;;		On exit  : 0/0
  1072 ;;		Unchanged: 0/0
  1073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1074 ;;      Params:         3       0       0       0       0       0       0       0       0
  1075 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1076 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1077 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1078 ;;Total ram usage:        3 bytes
  1079 ;; Hardware stack levels used:    1
  1080 ;; Hardware stack levels required when called:    3
  1081 ;; This function calls:
  1082 ;;		Nothing
  1083 ;; This function is called by:
  1084 ;;		_D_SEG_Update
  1085 ;; This function uses a non-reentrant model
  1086 ;;
  1087                           
  1088                           	psect	text6
  1089  0000CA                     __ptext6:
  1090                           	opt stack 0
  1091  0000CA                     _convertValueToSegment:
  1092                           	opt stack 24
  1093                           
  1094                           ;SEG_Driver.c: 50: while(data >= 10) {
  1095                           
  1096                           ;incstack = 0
  1097  0000CA  D002               	goto	l27
  1098  0000CC                     l1107:
  1099                           
  1100                           ;SEG_Driver.c: 51: data -= 10;
  1101  0000CC  0E0A               	movlw	10
  1102  0000CE  5E18               	subwf	convertValueToSegment@data,f,c
  1103  0000D0                     l27:
  1104  0000D0  0E0A               	movlw	10
  1105  0000D2  6018               	cpfslt	convertValueToSegment@data,c
  1106  0000D4  D7FB               	goto	l1107
  1107  0000D6  D05A               	goto	l1131
  1108  0000D8                     l1109:
  1109  0000D8  EE20 F005          	lfsr	2,5
  1110  0000DC  5016               	movf	convertValueToSegment@segment,w,c
  1111  0000DE  26D9               	addwf	fsr2l,f,c
  1112  0000E0  5017               	movf	convertValueToSegment@segment+1,w,c
  1113  0000E2  22DA               	addwfc	fsr2h,f,c
  1114  0000E4  0E3F               	movlw	63
  1115  0000E6  6EDF               	movwf	indf2,c
  1116  0000E8  0012               	return	
  1117  0000EA                     l1111:
  1118  0000EA  EE20 F005          	lfsr	2,5
  1119  0000EE  5016               	movf	convertValueToSegment@segment,w,c
  1120  0000F0  26D9               	addwf	fsr2l,f,c
  1121  0000F2  5017               	movf	convertValueToSegment@segment+1,w,c
  1122  0000F4  22DA               	addwfc	fsr2h,f,c
  1123  0000F6  0E06               	movlw	6
  1124  0000F8  6EDF               	movwf	indf2,c
  1125  0000FA  0012               	return	
  1126  0000FC                     l1113:
  1127  0000FC  EE20 F005          	lfsr	2,5
  1128  000100  5016               	movf	convertValueToSegment@segment,w,c
  1129  000102  26D9               	addwf	fsr2l,f,c
  1130  000104  5017               	movf	convertValueToSegment@segment+1,w,c
  1131  000106  22DA               	addwfc	fsr2h,f,c
  1132  000108  0E5B               	movlw	91
  1133  00010A  6EDF               	movwf	indf2,c
  1134  00010C  0012               	return	
  1135  00010E                     l1115:
  1136  00010E  EE20 F005          	lfsr	2,5
  1137  000112  5016               	movf	convertValueToSegment@segment,w,c
  1138  000114  26D9               	addwf	fsr2l,f,c
  1139  000116  5017               	movf	convertValueToSegment@segment+1,w,c
  1140  000118  22DA               	addwfc	fsr2h,f,c
  1141  00011A  0E4F               	movlw	79
  1142  00011C  6EDF               	movwf	indf2,c
  1143  00011E  0012               	return	
  1144  000120                     l1117:
  1145  000120  EE20 F005          	lfsr	2,5
  1146  000124  5016               	movf	convertValueToSegment@segment,w,c
  1147  000126  26D9               	addwf	fsr2l,f,c
  1148  000128  5017               	movf	convertValueToSegment@segment+1,w,c
  1149  00012A  22DA               	addwfc	fsr2h,f,c
  1150  00012C  0E66               	movlw	102
  1151  00012E  6EDF               	movwf	indf2,c
  1152  000130  0012               	return	
  1153  000132                     l1119:
  1154  000132  EE20 F005          	lfsr	2,5
  1155  000136  5016               	movf	convertValueToSegment@segment,w,c
  1156  000138  26D9               	addwf	fsr2l,f,c
  1157  00013A  5017               	movf	convertValueToSegment@segment+1,w,c
  1158  00013C  22DA               	addwfc	fsr2h,f,c
  1159  00013E  0E6D               	movlw	109
  1160  000140  6EDF               	movwf	indf2,c
  1161  000142  0012               	return	
  1162  000144                     l1121:
  1163  000144  EE20 F005          	lfsr	2,5
  1164  000148  5016               	movf	convertValueToSegment@segment,w,c
  1165  00014A  26D9               	addwf	fsr2l,f,c
  1166  00014C  5017               	movf	convertValueToSegment@segment+1,w,c
  1167  00014E  22DA               	addwfc	fsr2h,f,c
  1168  000150  0E7D               	movlw	125
  1169  000152  6EDF               	movwf	indf2,c
  1170  000154  0012               	return	
  1171  000156                     l1123:
  1172  000156  EE20 F005          	lfsr	2,5
  1173  00015A  5016               	movf	convertValueToSegment@segment,w,c
  1174  00015C  26D9               	addwf	fsr2l,f,c
  1175  00015E  5017               	movf	convertValueToSegment@segment+1,w,c
  1176  000160  22DA               	addwfc	fsr2h,f,c
  1177  000162  0E07               	movlw	7
  1178  000164  6EDF               	movwf	indf2,c
  1179  000166  0012               	return	
  1180  000168                     l1125:
  1181  000168  EE20 F005          	lfsr	2,5
  1182  00016C  5016               	movf	convertValueToSegment@segment,w,c
  1183  00016E  26D9               	addwf	fsr2l,f,c
  1184  000170  5017               	movf	convertValueToSegment@segment+1,w,c
  1185  000172  22DA               	addwfc	fsr2h,f,c
  1186  000174  0E7F               	movlw	127
  1187  000176  6EDF               	movwf	indf2,c
  1188  000178  0012               	return	
  1189  00017A                     l1127:
  1190  00017A  EE20 F005          	lfsr	2,5
  1191  00017E  5016               	movf	convertValueToSegment@segment,w,c
  1192  000180  26D9               	addwf	fsr2l,f,c
  1193  000182  5017               	movf	convertValueToSegment@segment+1,w,c
  1194  000184  22DA               	addwfc	fsr2h,f,c
  1195  000186  0E6F               	movlw	111
  1196  000188  6EDF               	movwf	indf2,c
  1197                           
  1198                           ;SEG_Driver.c: 65: }
  1199  00018A  0012               	return	
  1200  00018C                     l1131:
  1201  00018C  5018               	movf	convertValueToSegment@data,w,c
  1202                           
  1203                           ; Switch size 1, requested type "space"
  1204                           ; Number of cases is 10, Range of values is 0 to 9
  1205                           ; switch strategies available:
  1206                           ; Name         Instructions Cycles
  1207                           ; simple_byte           31    16 (average)
  1208                           ;	Chosen strategy is simple_byte
  1209  00018E  0A00               	xorlw	0	; case 0
  1210  000190  B4D8               	btfsc	status,2,c
  1211  000192  D7A2               	goto	l1109
  1212  000194  0A01               	xorlw	1	; case 1
  1213  000196  B4D8               	btfsc	status,2,c
  1214  000198  D7A8               	goto	l1111
  1215  00019A  0A03               	xorlw	3	; case 2
  1216  00019C  B4D8               	btfsc	status,2,c
  1217  00019E  D7AE               	goto	l1113
  1218  0001A0  0A01               	xorlw	1	; case 3
  1219  0001A2  B4D8               	btfsc	status,2,c
  1220  0001A4  D7B4               	goto	l1115
  1221  0001A6  0A07               	xorlw	7	; case 4
  1222  0001A8  B4D8               	btfsc	status,2,c
  1223  0001AA  D7BA               	goto	l1117
  1224  0001AC  0A01               	xorlw	1	; case 5
  1225  0001AE  B4D8               	btfsc	status,2,c
  1226  0001B0  D7C0               	goto	l1119
  1227  0001B2  0A03               	xorlw	3	; case 6
  1228  0001B4  B4D8               	btfsc	status,2,c
  1229  0001B6  D7C6               	goto	l1121
  1230  0001B8  0A01               	xorlw	1	; case 7
  1231  0001BA  B4D8               	btfsc	status,2,c
  1232  0001BC  D7CC               	goto	l1123
  1233  0001BE  0A0F               	xorlw	15	; case 8
  1234  0001C0  B4D8               	btfsc	status,2,c
  1235  0001C2  D7D2               	goto	l1125
  1236  0001C4  0A01               	xorlw	1	; case 9
  1237  0001C6  A4D8               	btfss	status,2,c
  1238  0001C8  0012               	return	
  1239  0001CA  D7D7               	goto	l1127
  1240  0001CC                     __end_of_convertValueToSegment:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           prodh	equ	0xFF4
  1244                           prodl	equ	0xFF3
  1245                           postinc0	equ	0xFEE
  1246                           wreg	equ	0xFE8
  1247                           indf2	equ	0xFDF
  1248                           fsr2h	equ	0xFDA
  1249                           fsr2l	equ	0xFD9
  1250                           status	equ	0xFD8
  1251                           
  1252 ;; *************** function _determineWinner *****************
  1253 ;; Defined at:
  1254 ;;		line 179 in file "Main.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;		None
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;		None
  1259 ;; Return value:  Size  Location     Type
  1260 ;;                  1    wreg      unsigned char 
  1261 ;; Registers used:
  1262 ;;		wreg, status,2, status,0
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 0/0
  1266 ;;		Unchanged: 0/0
  1267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1268 ;;      Params:         0       0       0       0       0       0       0       0       0
  1269 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1270 ;;      Temps:          5       0       0       0       0       0       0       0       0
  1271 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1272 ;;Total ram usage:        5 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    3
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_main
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282                           	psect	text7
  1283  000592                     __ptext7:
  1284                           	opt stack 0
  1285  000592                     _determineWinner:
  1286                           	opt stack 27
  1287                           
  1288                           ;Main.c: 180: if (score_1 >= 10) {
  1289                           
  1290                           ;incstack = 0
  1291  000592  0E09               	movlw	9
  1292  000594  6426               	cpfsgt	_score_1,c
  1293  000596  D016               	goto	l1041
  1294                           
  1295                           ;Main.c: 181: if (score_1 > (score_2+2)) return 0x01;
  1296  000598  5026               	movf	_score_1,w,c
  1297  00059A  6E16               	movwf	??_determineWinner& (0+255),c
  1298  00059C  6A17               	clrf	(??_determineWinner+1)& (0+255),c
  1299  00059E  5027               	movf	_score_2,w,c
  1300  0005A0  6E18               	movwf	(??_determineWinner+2)& (0+255),c
  1301  0005A2  6A19               	clrf	(??_determineWinner+3)& (0+255),c
  1302  0005A4  0E02               	movlw	2
  1303  0005A6  2618               	addwf	??_determineWinner+2,f,c
  1304  0005A8  0E00               	movlw	0
  1305  0005AA  2219               	addwfc	??_determineWinner+3,f,c
  1306  0005AC  5016               	movf	??_determineWinner,w,c
  1307  0005AE  5C18               	subwf	??_determineWinner+2,w,c
  1308  0005B0  5019               	movf	??_determineWinner+3,w,c
  1309  0005B2  0A80               	xorlw	128
  1310  0005B4  6E1A               	movwf	(??_determineWinner+4)& (0+255),c
  1311  0005B6  5017               	movf	??_determineWinner+1,w,c
  1312  0005B8  0A80               	xorlw	128
  1313  0005BA  581A               	subwfb	(??_determineWinner+4)& (0+255),w,c
  1314  0005BC  B0D8               	btfsc	status,0,c
  1315  0005BE  D002               	goto	l1041
  1316  0005C0  0E01               	movlw	1
  1317  0005C2  0012               	return	
  1318  0005C4                     l1041:
  1319                           
  1320                           ;Main.c: 182: }
  1321                           ;Main.c: 184: if (score_2 >= 10) {
  1322  0005C4  0E09               	movlw	9
  1323  0005C6  6427               	cpfsgt	_score_2,c
  1324  0005C8  D016               	goto	l1049
  1325                           
  1326                           ;Main.c: 185: if (score_2 > (score_1+2)) return 0x02;
  1327  0005CA  5027               	movf	_score_2,w,c
  1328  0005CC  6E16               	movwf	??_determineWinner& (0+255),c
  1329  0005CE  6A17               	clrf	(??_determineWinner+1)& (0+255),c
  1330  0005D0  5026               	movf	_score_1,w,c
  1331  0005D2  6E18               	movwf	(??_determineWinner+2)& (0+255),c
  1332  0005D4  6A19               	clrf	(??_determineWinner+3)& (0+255),c
  1333  0005D6  0E02               	movlw	2
  1334  0005D8  2618               	addwf	??_determineWinner+2,f,c
  1335  0005DA  0E00               	movlw	0
  1336  0005DC  2219               	addwfc	??_determineWinner+3,f,c
  1337  0005DE  5016               	movf	??_determineWinner,w,c
  1338  0005E0  5C18               	subwf	??_determineWinner+2,w,c
  1339  0005E2  5019               	movf	??_determineWinner+3,w,c
  1340  0005E4  0A80               	xorlw	128
  1341  0005E6  6E1A               	movwf	(??_determineWinner+4)& (0+255),c
  1342  0005E8  5017               	movf	??_determineWinner+1,w,c
  1343  0005EA  0A80               	xorlw	128
  1344  0005EC  581A               	subwfb	(??_determineWinner+4)& (0+255),w,c
  1345  0005EE  B0D8               	btfsc	status,0,c
  1346  0005F0  D002               	goto	l1049
  1347  0005F2  0E02               	movlw	2
  1348  0005F4  0012               	return	
  1349  0005F6                     l1049:
  1350                           
  1351                           ;Main.c: 186: }
  1352                           ;Main.c: 188: return 0x00;
  1353  0005F6  0E00               	movlw	0
  1354  0005F8  0012               	return	
  1355  0005FA                     __end_of_determineWinner:
  1356                           	opt stack 0
  1357                           tblptru	equ	0xFF8
  1358                           prodh	equ	0xFF4
  1359                           prodl	equ	0xFF3
  1360                           postinc0	equ	0xFEE
  1361                           wreg	equ	0xFE8
  1362                           indf2	equ	0xFDF
  1363                           fsr2h	equ	0xFDA
  1364                           fsr2l	equ	0xFD9
  1365                           status	equ	0xFD8
  1366                           
  1367 ;; *************** function _checkInputs *****************
  1368 ;; Defined at:
  1369 ;;		line 146 in file "Main.c"
  1370 ;; Parameters:    Size  Location     Type
  1371 ;;		None
  1372 ;; Auto vars:     Size  Location     Type
  1373 ;;		None
  1374 ;; Return value:  Size  Location     Type
  1375 ;;                  1    wreg      unsigned char 
  1376 ;; Registers used:
  1377 ;;		wreg, status,2, status,0, cstack
  1378 ;; Tracked objects:
  1379 ;;		On entry : 0/0
  1380 ;;		On exit  : 0/0
  1381 ;;		Unchanged: 0/0
  1382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1383 ;;      Params:         0       0       0       0       0       0       0       0       0
  1384 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1385 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1386 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1387 ;;Total ram usage:        0 bytes
  1388 ;; Hardware stack levels used:    1
  1389 ;; Hardware stack levels required when called:    4
  1390 ;; This function calls:
  1391 ;;		_delay
  1392 ;; This function is called by:
  1393 ;;		_main
  1394 ;; This function uses a non-reentrant model
  1395 ;;
  1396                           
  1397                           	psect	text8
  1398  0005FA                     __ptext8:
  1399                           	opt stack 0
  1400  0005FA                     _checkInputs:
  1401                           	opt stack 26
  1402                           
  1403                           ;Main.c: 148: if(PORTAbits.RA0) {
  1404                           
  1405                           ;incstack = 0
  1406  0005FA  A080               	btfss	3968,0,c	;volatile
  1407  0005FC  D008               	goto	l150
  1408                           
  1409                           ;Main.c: 149: delay(100);
  1410  0005FE  0E00               	movlw	0
  1411  000600  6E17               	movwf	delay@ms+1,c
  1412  000602  0E64               	movlw	100
  1413  000604  6E16               	movwf	delay@ms,c
  1414  000606  EC13  F003         	call	_delay	;wreg free
  1415                           
  1416                           ;Main.c: 150: return 0x01;
  1417  00060A  0E01               	movlw	1
  1418  00060C  0012               	return	
  1419  00060E                     l150:
  1420                           
  1421                           ;Main.c: 151: }
  1422                           ;Main.c: 152: if(PORTAbits.RA1) {
  1423  00060E  A280               	btfss	3968,1,c	;volatile
  1424  000610  D008               	goto	l1305
  1425                           
  1426                           ;Main.c: 153: delay(100);
  1427  000612  0E00               	movlw	0
  1428  000614  6E17               	movwf	delay@ms+1,c
  1429  000616  0E64               	movlw	100
  1430  000618  6E16               	movwf	delay@ms,c
  1431  00061A  EC13  F003         	call	_delay	;wreg free
  1432                           
  1433                           ;Main.c: 154: return 0x02;
  1434  00061E  0E02               	movlw	2
  1435  000620  0012               	return	
  1436  000622                     l1305:
  1437                           
  1438                           ;Main.c: 155: }
  1439                           ;Main.c: 159: return 0x00;
  1440  000622  0E00               	movlw	0
  1441  000624  0012               	return	
  1442  000626                     __end_of_checkInputs:
  1443                           	opt stack 0
  1444                           tblptru	equ	0xFF8
  1445                           prodh	equ	0xFF4
  1446                           prodl	equ	0xFF3
  1447                           postinc0	equ	0xFEE
  1448                           wreg	equ	0xFE8
  1449                           indf2	equ	0xFDF
  1450                           fsr2h	equ	0xFDA
  1451                           fsr2l	equ	0xFD9
  1452                           status	equ	0xFD8
  1453                           
  1454 ;; *************** function _delay *****************
  1455 ;; Defined at:
  1456 ;;		line 191 in file "Main.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  ms              2   21[COMRAM] unsigned int 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;  i               2   24[COMRAM] unsigned int 
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  1    wreg      void 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1470 ;;      Params:         2       0       0       0       0       0       0       0       0
  1471 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1472 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1473 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1474 ;;Total ram usage:        5 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    3
  1477 ;; This function calls:
  1478 ;;		Nothing
  1479 ;; This function is called by:
  1480 ;;		_checkInputs
  1481 ;; This function uses a non-reentrant model
  1482 ;;
  1483                           
  1484                           	psect	text9
  1485  000626                     __ptext9:
  1486                           	opt stack 0
  1487  000626                     _delay:
  1488                           	opt stack 26
  1489                           
  1490                           ;Main.c: 192: uint16_t i = 0;
  1491                           
  1492                           ;incstack = 0
  1493  000626  0E00               	movlw	0
  1494  000628  6E1A               	movwf	delay@i+1,c
  1495  00062A  0E00               	movlw	0
  1496  00062C  6E19               	movwf	delay@i,c
  1497                           
  1498                           ;Main.c: 193: while(ms > 0) {
  1499  00062E  D00A               	goto	l170
  1500  000630                     l1229:
  1501                           
  1502                           ;Main.c: 194: ms--;
  1503  000630  0616               	decf	delay@ms,f,c
  1504  000632  A0D8               	btfss	status,0,c
  1505  000634  0617               	decf	delay@ms+1,f,c
  1506                           
  1507                           ;Main.c: 195: _delay((unsigned long)((1)*(10000000/4000.0)));
  1508  000636  0E04               	movlw	4
  1509  000638  6E18               	movwf	??_delay& (0+255),c
  1510  00063A  0E3E               	movlw	62
  1511  00063C                     u577:
  1512  00063C  2EE8               	decfsz	wreg,f,c
  1513  00063E  D7FE               	goto	u577
  1514  000640  2E18               	decfsz	??_delay& (0+255),f,c
  1515  000642  D7FC               	goto	u577
  1516  000644                     l170:
  1517  000644  5016               	movf	delay@ms,w,c
  1518  000646  1017               	iorwf	delay@ms+1,w,c
  1519  000648  B4D8               	btfsc	status,2,c
  1520  00064A  0012               	return	
  1521  00064C  D7F1               	goto	l1229
  1522  00064E                     __end_of_delay:
  1523                           	opt stack 0
  1524                           tblptru	equ	0xFF8
  1525                           prodh	equ	0xFF4
  1526                           prodl	equ	0xFF3
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           indf2	equ	0xFDF
  1530                           fsr2h	equ	0xFDA
  1531                           fsr2l	equ	0xFD9
  1532                           status	equ	0xFD8
  1533                           
  1534 ;; *************** function _D_SEG_Start *****************
  1535 ;; Defined at:
  1536 ;;		line 117 in file "Drivers/SEG_Driver.c"
  1537 ;; Parameters:    Size  Location     Type
  1538 ;;		None
  1539 ;; Auto vars:     Size  Location     Type
  1540 ;;		None
  1541 ;; Return value:  Size  Location     Type
  1542 ;;                  1    wreg      void 
  1543 ;; Registers used:
  1544 ;;		None
  1545 ;; Tracked objects:
  1546 ;;		On entry : 0/0
  1547 ;;		On exit  : 0/0
  1548 ;;		Unchanged: 0/0
  1549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1550 ;;      Params:         0       0       0       0       0       0       0       0       0
  1551 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1552 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1553 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1554 ;;Total ram usage:        0 bytes
  1555 ;; Hardware stack levels used:    1
  1556 ;; Hardware stack levels required when called:    3
  1557 ;; This function calls:
  1558 ;;		Nothing
  1559 ;; This function is called by:
  1560 ;;		_main
  1561 ;; This function uses a non-reentrant model
  1562 ;;
  1563                           
  1564                           	psect	text10
  1565  0006D4                     __ptext10:
  1566                           	opt stack 0
  1567  0006D4                     _D_SEG_Start:
  1568                           	opt stack 27
  1569                           
  1570                           ;SEG_Driver.c: 119: T0CONbits.TMR0ON = 1;
  1571                           
  1572                           ;incstack = 0
  1573  0006D4  8ED5               	bsf	4053,7,c	;volatile
  1574  0006D6  0012               	return		;funcret
  1575  0006D8                     __end_of_D_SEG_Start:
  1576                           	opt stack 0
  1577                           tblptru	equ	0xFF8
  1578                           prodh	equ	0xFF4
  1579                           prodl	equ	0xFF3
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           indf2	equ	0xFDF
  1583                           fsr2h	equ	0xFDA
  1584                           fsr2l	equ	0xFD9
  1585                           status	equ	0xFD8
  1586                           
  1587 ;; *************** function _D_SEG_Init *****************
  1588 ;; Defined at:
  1589 ;;		line 76 in file "Drivers/SEG_Driver.c"
  1590 ;; Parameters:    Size  Location     Type
  1591 ;;		None
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;		None
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1603 ;;      Params:         0       0       0       0       0       0       0       0       0
  1604 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1605 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1606 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1607 ;;Total ram usage:        0 bytes
  1608 ;; Hardware stack levels used:    1
  1609 ;; Hardware stack levels required when called:    3
  1610 ;; This function calls:
  1611 ;;		Nothing
  1612 ;; This function is called by:
  1613 ;;		_main
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	text11
  1618  00064E                     __ptext11:
  1619                           	opt stack 0
  1620  00064E                     _D_SEG_Init:
  1621                           	opt stack 27
  1622                           
  1623                           ;SEG_Driver.c: 78: segmentCnt = 0;
  1624                           
  1625                           ;incstack = 0
  1626  00064E  0E00               	movlw	0
  1627  000650  6E28               	movwf	_segmentCnt,c
  1628                           
  1629                           ;SEG_Driver.c: 79: currentSeg = 0;
  1630  000652  0E00               	movlw	0
  1631  000654  6E25               	movwf	_currentSeg,c
  1632                           
  1633                           ;SEG_Driver.c: 82: T0CONbits.TMR0ON = 0;
  1634  000656  9ED5               	bcf	4053,7,c	;volatile
  1635                           
  1636                           ;SEG_Driver.c: 83: T0CONbits.T08BIT = 1;
  1637  000658  8CD5               	bsf	4053,6,c	;volatile
  1638                           
  1639                           ;SEG_Driver.c: 84: T0CONbits.T0CS = 0;
  1640  00065A  9AD5               	bcf	4053,5,c	;volatile
  1641                           
  1642                           ;SEG_Driver.c: 85: T0CONbits.PSA = 0;
  1643  00065C  96D5               	bcf	4053,3,c	;volatile
  1644                           
  1645                           ;SEG_Driver.c: 86: T0CONbits.T0PS = 0b011;
  1646  00065E  50D5               	movf	4053,w,c	;volatile
  1647  000660  0BF8               	andlw	-8
  1648  000662  0903               	iorlw	3
  1649  000664  6ED5               	movwf	4053,c	;volatile
  1650                           
  1651                           ;SEG_Driver.c: 89: RCONbits.IPEN = 1;
  1652  000666  8ED0               	bsf	4048,7,c	;volatile
  1653                           
  1654                           ;SEG_Driver.c: 90: INTCONbits.GIEH = 1;
  1655  000668  8EF2               	bsf	intcon,7,c	;volatile
  1656                           
  1657                           ;SEG_Driver.c: 91: INTCONbits.GIEL = 1;
  1658  00066A  8CF2               	bsf	intcon,6,c	;volatile
  1659                           
  1660                           ;SEG_Driver.c: 93: INTCONbits.TMR0IF = 0;
  1661  00066C  94F2               	bcf	intcon,2,c	;volatile
  1662                           
  1663                           ;SEG_Driver.c: 94: INTCON2bits.TMR0IP = 0;
  1664  00066E  94F1               	bcf	intcon2,2,c	;volatile
  1665                           
  1666                           ;SEG_Driver.c: 95: INTCONbits.TMR0IE = 1;
  1667  000670  8AF2               	bsf	intcon,5,c	;volatile
  1668  000672  0012               	return		;funcret
  1669  000674                     __end_of_D_SEG_Init:
  1670                           	opt stack 0
  1671                           tblptru	equ	0xFF8
  1672                           prodh	equ	0xFF4
  1673                           prodl	equ	0xFF3
  1674                           intcon	equ	0xFF2
  1675                           intcon2	equ	0xFF1
  1676                           postinc0	equ	0xFEE
  1677                           wreg	equ	0xFE8
  1678                           indf2	equ	0xFDF
  1679                           fsr2h	equ	0xFDA
  1680                           fsr2l	equ	0xFD9
  1681                           status	equ	0xFD8
  1682                           
  1683 ;; *************** function _D_SEG_Add *****************
  1684 ;; Defined at:
  1685 ;;		line 98 in file "Drivers/SEG_Driver.c"
  1686 ;; Parameters:    Size  Location     Type
  1687 ;;  ID              1    wreg     unsigned char 
  1688 ;;  port            2   21[COMRAM] PTR volatile unsigned ch
  1689 ;;		 -> PORTA(1), 
  1690 ;;  portPin         1   23[COMRAM] unsigned char 
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;  ID              1   25[COMRAM] unsigned char 
  1693 ;;  temp            6   27[COMRAM] struct .
  1694 ;;  i               1   26[COMRAM] unsigned char 
  1695 ;; Return value:  Size  Location     Type
  1696 ;;                  1    wreg      void 
  1697 ;; Registers used:
  1698 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1699 ;; Tracked objects:
  1700 ;;		On entry : 0/0
  1701 ;;		On exit  : 0/0
  1702 ;;		Unchanged: 0/0
  1703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1704 ;;      Params:         3       0       0       0       0       0       0       0       0
  1705 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1706 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1707 ;;      Totals:        12       0       0       0       0       0       0       0       0
  1708 ;;Total ram usage:       12 bytes
  1709 ;; Hardware stack levels used:    1
  1710 ;; Hardware stack levels required when called:    3
  1711 ;; This function calls:
  1712 ;;		Nothing
  1713 ;; This function is called by:
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text12
  1719  000528                     __ptext12:
  1720                           	opt stack 0
  1721  000528                     _D_SEG_Add:
  1722                           	opt stack 27
  1723                           
  1724                           ;incstack = 0
  1725                           ;D_SEG_Add@ID stored from wreg
  1726  000528  6E1A               	movwf	D_SEG_Add@ID,c
  1727                           
  1728                           ;SEG_Driver.c: 99: if(segmentCnt < 4) {
  1729  00052A  0E04               	movlw	4
  1730  00052C  6028               	cpfslt	_segmentCnt,c
  1731  00052E  0012               	return	
  1732                           
  1733                           ;SEG_Driver.c: 100: uint8_t i;
  1734                           ;SEG_Driver.c: 101: for(i=0; i<segmentCnt; i++) {
  1735  000530  0E00               	movlw	0
  1736  000532  6E1B               	movwf	D_SEG_Add@i,c
  1737  000534  D00D               	goto	l1243
  1738  000536                     l1237:
  1739                           
  1740                           ;SEG_Driver.c: 102: if(segments[i].ID == ID) return;
  1741  000536  501B               	movf	D_SEG_Add@i,w,c
  1742  000538  0D06               	mullw	6
  1743  00053A  0E29               	movlw	low _segments
  1744  00053C  24F3               	addwf	prodl,w,c
  1745  00053E  6ED9               	movwf	fsr2l,c
  1746  000540  0E00               	movlw	high _segments
  1747  000542  20F4               	addwfc	prodh,w,c
  1748  000544  6EDA               	movwf	fsr2h,c
  1749  000546  501A               	movf	D_SEG_Add@ID,w,c
  1750  000548  18DE               	xorwf	postinc2,w,c
  1751  00054A  B4D8               	btfsc	status,2,c
  1752  00054C  0012               	return	
  1753  00054E  2A1B               	incf	D_SEG_Add@i,f,c
  1754  000550                     l1243:
  1755  000550  5028               	movf	_segmentCnt,w,c
  1756  000552  5C1B               	subwf	D_SEG_Add@i,w,c
  1757  000554  A0D8               	btfss	status,0,c
  1758  000556  D7EF               	goto	l1237
  1759                           
  1760                           ;SEG_Driver.c: 103: }
  1761                           ;SEG_Driver.c: 105: SEG_Segment temp;
  1762                           ;SEG_Driver.c: 106: temp.ID = segmentCnt;
  1763  000558  C028  F01C         	movff	_segmentCnt,D_SEG_Add@temp
  1764                           
  1765                           ;SEG_Driver.c: 107: temp.PORT = port;
  1766  00055C  C016  F01D         	movff	D_SEG_Add@port,D_SEG_Add@temp+1
  1767  000560  C017  F01E         	movff	D_SEG_Add@port+1,D_SEG_Add@temp+2
  1768                           
  1769                           ;SEG_Driver.c: 108: temp.portBit = portPin;
  1770  000564  C018  F01F         	movff	D_SEG_Add@portPin,D_SEG_Add@temp+3
  1771                           
  1772                           ;SEG_Driver.c: 109: temp.value = 0;
  1773  000568  0E00               	movlw	0
  1774  00056A  6E20               	movwf	D_SEG_Add@temp+4,c
  1775                           
  1776                           ;SEG_Driver.c: 110: temp.converted = 0;
  1777  00056C  0E00               	movlw	0
  1778  00056E  6E21               	movwf	D_SEG_Add@temp+5,c
  1779                           
  1780                           ;SEG_Driver.c: 111: segments[segmentCnt] = temp;
  1781  000570  EE20  F01C         	lfsr	2,D_SEG_Add@temp
  1782  000574  5028               	movf	_segmentCnt,w,c
  1783  000576  0D06               	mullw	6
  1784  000578  0E29               	movlw	low _segments
  1785  00057A  24F3               	addwf	prodl,w,c
  1786  00057C  6EE1               	movwf	fsr1l,c
  1787  00057E  0E00               	movlw	high _segments
  1788  000580  20F4               	addwfc	prodh,w,c
  1789  000582  6EE2               	movwf	fsr1h,c
  1790  000584  0E05               	movlw	5
  1791  000586                     u521:
  1792  000586  CFDB FFE3          	movff	plusw2,plusw1
  1793  00058A  06E8               	decf	wreg,f,c
  1794  00058C  E2FC               	bc	u521
  1795                           
  1796                           ;SEG_Driver.c: 113: segmentCnt++;
  1797  00058E  2A28               	incf	_segmentCnt,f,c
  1798  000590  0012               	return	
  1799  000592                     __end_of_D_SEG_Add:
  1800                           	opt stack 0
  1801                           tblptru	equ	0xFF8
  1802                           prodh	equ	0xFF4
  1803                           prodl	equ	0xFF3
  1804                           intcon	equ	0xFF2
  1805                           intcon2	equ	0xFF1
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           plusw1	equ	0xFE3
  1809                           fsr1h	equ	0xFE2
  1810                           fsr1l	equ	0xFE1
  1811                           indf2	equ	0xFDF
  1812                           postinc2	equ	0xFDE
  1813                           plusw2	equ	0xFDB
  1814                           fsr2h	equ	0xFDA
  1815                           fsr2l	equ	0xFD9
  1816                           status	equ	0xFD8
  1817                           
  1818 ;; *************** function _LowInterruptRoutine *****************
  1819 ;; Defined at:
  1820 ;;		line 138 in file "Drivers/SEG_Driver.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;		None
  1823 ;; Auto vars:     Size  Location     Type
  1824 ;;		None
  1825 ;; Return value:  Size  Location     Type
  1826 ;;                  1    wreg      void 
  1827 ;; Registers used:
  1828 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1829 ;; Tracked objects:
  1830 ;;		On entry : 0/0
  1831 ;;		On exit  : 0/0
  1832 ;;		Unchanged: 0/0
  1833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1834 ;;      Params:         0       0       0       0       0       0       0       0       0
  1835 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1836 ;;      Temps:         18       0       0       0       0       0       0       0       0
  1837 ;;      Totals:        18       0       0       0       0       0       0       0       0
  1838 ;;Total ram usage:       18 bytes
  1839 ;; Hardware stack levels used:    1
  1840 ;; Hardware stack levels required when called:    2
  1841 ;; This function calls:
  1842 ;;		_writeSegment
  1843 ;; This function is called by:
  1844 ;;		Interrupt level 1
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848                           	psect	intcodelo
  1849  000018                     __pintcodelo:
  1850                           	opt stack 0
  1851  000018                     _LowInterruptRoutine:
  1852                           	opt stack 24
  1853                           
  1854                           ;incstack = 0
  1855  000018  8041               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  1856  00001A  CFD8 F005          	movff	status,??_LowInterruptRoutine+1
  1857  00001E  CFE8 F006          	movff	wreg,??_LowInterruptRoutine+2
  1858  000022  CFE0 F007          	movff	bsr,??_LowInterruptRoutine+3
  1859  000026  CFFA F008          	movff	pclath,??_LowInterruptRoutine+4
  1860  00002A  CFFB F009          	movff	pclatu,??_LowInterruptRoutine+5
  1861  00002E  CFE9 F00A          	movff	fsr0l,??_LowInterruptRoutine+6
  1862  000032  CFEA F00B          	movff	fsr0h,??_LowInterruptRoutine+7
  1863  000036  CFE1 F00C          	movff	fsr1l,??_LowInterruptRoutine+8
  1864  00003A  CFE2 F00D          	movff	fsr1h,??_LowInterruptRoutine+9
  1865  00003E  CFD9 F00E          	movff	fsr2l,??_LowInterruptRoutine+10
  1866  000042  CFDA F00F          	movff	fsr2h,??_LowInterruptRoutine+11
  1867  000046  CFF3 F010          	movff	prodl,??_LowInterruptRoutine+12
  1868  00004A  CFF4 F011          	movff	prodh,??_LowInterruptRoutine+13
  1869  00004E  CFF6 F012          	movff	tblptrl,??_LowInterruptRoutine+14
  1870  000052  CFF7 F013          	movff	tblptrh,??_LowInterruptRoutine+15
  1871  000056  CFF8 F014          	movff	tblptru,??_LowInterruptRoutine+16
  1872  00005A  CFF5 F015          	movff	tablat,??_LowInterruptRoutine+17
  1873                           
  1874                           ;SEG_Driver.c: 139: if(INTCONbits.T0IF) {
  1875  00005E  A4F2               	btfss	intcon,2,c	;volatile
  1876  000060  D00E               	goto	i1l70
  1877                           
  1878                           ;SEG_Driver.c: 140: PORTAbits.RA0 = !PORTAbits.RA0;
  1879  000062  B080               	btfsc	3968,0,c	;volatile
  1880  000064  D003               	goto	i1u32_20
  1881  000066  6A04               	clrf	??_LowInterruptRoutine& (0+255),c
  1882  000068  2A04               	incf	??_LowInterruptRoutine& (0+255),f,c
  1883  00006A  D001               	goto	i1u33_28
  1884  00006C                     i1u32_20:
  1885  00006C  6A04               	clrf	??_LowInterruptRoutine& (0+255),c
  1886  00006E                     i1u33_28:
  1887  00006E  5080               	movf	3968,w,c	;volatile
  1888  000070  1804               	xorwf	??_LowInterruptRoutine,w,c
  1889  000072  0BFE               	andlw	-2
  1890  000074  1804               	xorwf	??_LowInterruptRoutine,w,c
  1891  000076  6E80               	movwf	3968,c	;volatile
  1892                           
  1893                           ;SEG_Driver.c: 142: writeSegment();
  1894  000078  EC4C  F003         	call	_writeSegment	;wreg free
  1895                           
  1896                           ;SEG_Driver.c: 143: INTCONbits.T0IF = 0;
  1897  00007C  94F2               	bcf	intcon,2,c	;volatile
  1898  00007E                     i1l70:
  1899  00007E  C015  FFF5         	movff	??_LowInterruptRoutine+17,tablat
  1900  000082  C014  FFF8         	movff	??_LowInterruptRoutine+16,tblptru
  1901  000086  C013  FFF7         	movff	??_LowInterruptRoutine+15,tblptrh
  1902  00008A  C012  FFF6         	movff	??_LowInterruptRoutine+14,tblptrl
  1903  00008E  C011  FFF4         	movff	??_LowInterruptRoutine+13,prodh
  1904  000092  C010  FFF3         	movff	??_LowInterruptRoutine+12,prodl
  1905  000096  C00F  FFDA         	movff	??_LowInterruptRoutine+11,fsr2h
  1906  00009A  C00E  FFD9         	movff	??_LowInterruptRoutine+10,fsr2l
  1907  00009E  C00D  FFE2         	movff	??_LowInterruptRoutine+9,fsr1h
  1908  0000A2  C00C  FFE1         	movff	??_LowInterruptRoutine+8,fsr1l
  1909  0000A6  C00B  FFEA         	movff	??_LowInterruptRoutine+7,fsr0h
  1910  0000AA  C00A  FFE9         	movff	??_LowInterruptRoutine+6,fsr0l
  1911  0000AE  C009  FFFB         	movff	??_LowInterruptRoutine+5,pclatu
  1912  0000B2  C008  FFFA         	movff	??_LowInterruptRoutine+4,pclath
  1913  0000B6  C007  FFE0         	movff	??_LowInterruptRoutine+3,bsr
  1914  0000BA  C006  FFE8         	movff	??_LowInterruptRoutine+2,wreg
  1915  0000BE  C005  FFD8         	movff	??_LowInterruptRoutine+1,status
  1916  0000C2  9041               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  1917  0000C4  0010               	retfie	
  1918  0000C6                     __end_of_LowInterruptRoutine:
  1919                           	opt stack 0
  1920                           pclatu	equ	0xFFB
  1921                           pclath	equ	0xFFA
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           prodh	equ	0xFF4
  1927                           prodl	equ	0xFF3
  1928                           intcon	equ	0xFF2
  1929                           intcon2	equ	0xFF1
  1930                           postinc0	equ	0xFEE
  1931                           fsr0h	equ	0xFEA
  1932                           fsr0l	equ	0xFE9
  1933                           wreg	equ	0xFE8
  1934                           plusw1	equ	0xFE3
  1935                           fsr1h	equ	0xFE2
  1936                           fsr1l	equ	0xFE1
  1937                           bsr	equ	0xFE0
  1938                           indf2	equ	0xFDF
  1939                           postinc2	equ	0xFDE
  1940                           plusw2	equ	0xFDB
  1941                           fsr2h	equ	0xFDA
  1942                           fsr2l	equ	0xFD9
  1943                           status	equ	0xFD8
  1944                           
  1945 ;; *************** function _writeSegment *****************
  1946 ;; Defined at:
  1947 ;;		line 68 in file "Drivers/SEG_Driver.c"
  1948 ;; Parameters:    Size  Location     Type
  1949 ;;		None
  1950 ;; Auto vars:     Size  Location     Type
  1951 ;;		None
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      void 
  1954 ;; Registers used:
  1955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1961 ;;      Params:         0       0       0       0       0       0       0       0       0
  1962 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1964 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1965 ;;Total ram usage:        0 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    1
  1968 ;; This function calls:
  1969 ;;		_selectNextSegment
  1970 ;; This function is called by:
  1971 ;;		_LowInterruptRoutine
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text14
  1976  000698                     __ptext14:
  1977                           	opt stack 0
  1978  000698                     _writeSegment:
  1979                           	opt stack 24
  1980                           
  1981                           ;SEG_Driver.c: 69: selectNextSegment();
  1982                           
  1983                           ;incstack = 0
  1984  000698  EC21  F002         	call	_selectNextSegment	;wreg free
  1985                           
  1986                           ;SEG_Driver.c: 70: PORTB = segments[currentSeg].converted;
  1987  00069C  5025               	movf	_currentSeg,w,c
  1988  00069E  0D06               	mullw	6
  1989  0006A0  0E05               	movlw	5
  1990  0006A2  26F3               	addwf	prodl,f,c
  1991  0006A4  0E00               	movlw	0
  1992  0006A6  22F4               	addwfc	prodh,f,c
  1993  0006A8  0E29               	movlw	low _segments
  1994  0006AA  24F3               	addwf	prodl,w,c
  1995  0006AC  6ED9               	movwf	fsr2l,c
  1996  0006AE  0E00               	movlw	high _segments
  1997  0006B0  20F4               	addwfc	prodh,w,c
  1998  0006B2  6EDA               	movwf	fsr2h,c
  1999  0006B4  50DF               	movf	indf2,w,c
  2000  0006B6  6E81               	movwf	3969,c	;volatile
  2001  0006B8  0012               	return		;funcret
  2002  0006BA                     __end_of_writeSegment:
  2003                           	opt stack 0
  2004                           pclatu	equ	0xFFB
  2005                           pclath	equ	0xFFA
  2006                           tblptru	equ	0xFF8
  2007                           tblptrh	equ	0xFF7
  2008                           tblptrl	equ	0xFF6
  2009                           tablat	equ	0xFF5
  2010                           prodh	equ	0xFF4
  2011                           prodl	equ	0xFF3
  2012                           intcon	equ	0xFF2
  2013                           intcon2	equ	0xFF1
  2014                           postinc0	equ	0xFEE
  2015                           fsr0h	equ	0xFEA
  2016                           fsr0l	equ	0xFE9
  2017                           wreg	equ	0xFE8
  2018                           plusw1	equ	0xFE3
  2019                           fsr1h	equ	0xFE2
  2020                           fsr1l	equ	0xFE1
  2021                           bsr	equ	0xFE0
  2022                           indf2	equ	0xFDF
  2023                           postinc2	equ	0xFDE
  2024                           plusw2	equ	0xFDB
  2025                           fsr2h	equ	0xFDA
  2026                           fsr2l	equ	0xFD9
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _selectNextSegment *****************
  2030 ;; Defined at:
  2031 ;;		line 32 in file "Drivers/SEG_Driver.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;  select          1    2[COMRAM] unsigned char 
  2036 ;; Return value:  Size  Location     Type
  2037 ;;                  1    wreg      void 
  2038 ;; Registers used:
  2039 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2045 ;;      Params:         0       0       0       0       0       0       0       0       0
  2046 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2047 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2048 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2049 ;;Total ram usage:        3 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_writeSegment
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text15
  2059  000442                     __ptext15:
  2060                           	opt stack 0
  2061  000442                     _selectNextSegment:
  2062                           	opt stack 24
  2063                           
  2064                           ;SEG_Driver.c: 33: if(segmentCnt > 0) {
  2065                           
  2066                           ;incstack = 0
  2067  000442  5028               	movf	_segmentCnt,w,c
  2068  000444  B4D8               	btfsc	status,2,c
  2069  000446  0012               	return	
  2070                           
  2071                           ;SEG_Driver.c: 37: if(currentSeg == segmentCnt) {
  2072  000448  5028               	movf	_segmentCnt,w,c
  2073  00044A  1825               	xorwf	_currentSeg,w,c
  2074  00044C  A4D8               	btfss	status,2,c
  2075  00044E  D003               	goto	i1l905
  2076                           
  2077                           ;SEG_Driver.c: 38: currentSeg = 0;
  2078  000450  0E00               	movlw	0
  2079  000452  6E25               	movwf	_currentSeg,c
  2080                           
  2081                           ;SEG_Driver.c: 39: } else {
  2082  000454  D001               	goto	i1l907
  2083  000456                     i1l905:
  2084                           
  2085                           ;SEG_Driver.c: 40: currentSeg++;
  2086  000456  2A25               	incf	_currentSeg,f,c
  2087  000458                     i1l907:
  2088                           
  2089                           ;SEG_Driver.c: 41: }
  2090                           ;SEG_Driver.c: 42: uint8_t select = 0xFF;
  2091  000458  6803               	setf	selectNextSegment@select,c
  2092                           
  2093                           ;SEG_Driver.c: 43: select &= (1 << segments[currentSeg].portBit);
  2094  00045A  5025               	movf	_currentSeg,w,c
  2095  00045C  0D06               	mullw	6
  2096  00045E  0E03               	movlw	3
  2097  000460  26F3               	addwf	prodl,f,c
  2098  000462  0E00               	movlw	0
  2099  000464  22F4               	addwfc	prodh,f,c
  2100  000466  0E29               	movlw	low _segments
  2101  000468  24F3               	addwf	prodl,w,c
  2102  00046A  6ED9               	movwf	fsr2l,c
  2103  00046C  0E00               	movlw	high _segments
  2104  00046E  20F4               	addwfc	prodh,w,c
  2105  000470  6EDA               	movwf	fsr2h,c
  2106  000472  50DF               	movf	indf2,w,c
  2107  000474  6E01               	movwf	??_selectNextSegment& (0+255),c
  2108  000476  0E01               	movlw	1
  2109  000478  6E02               	movwf	(??_selectNextSegment+1)& (0+255),c
  2110  00047A  2A01               	incf	??_selectNextSegment,f,c
  2111  00047C  D002               	goto	i1u17_24
  2112  00047E                     i1u17_25:
  2113  00047E  90D8               	bcf	status,0,c
  2114  000480  3602               	rlcf	??_selectNextSegment+1,f,c
  2115  000482                     i1u17_24:
  2116  000482  2E01               	decfsz	??_selectNextSegment,f,c
  2117  000484  D7FC               	goto	i1u17_25
  2118  000486  5002               	movf	??_selectNextSegment+1,w,c
  2119  000488  1603               	andwf	selectNextSegment@select,f,c
  2120                           
  2121                           ;SEG_Driver.c: 44: *segments[currentSeg].PORT = select;
  2122  00048A  5025               	movf	_currentSeg,w,c
  2123  00048C  0D06               	mullw	6
  2124  00048E  0E01               	movlw	1
  2125  000490  26F3               	addwf	prodl,f,c
  2126  000492  0E00               	movlw	0
  2127  000494  22F4               	addwfc	prodh,f,c
  2128  000496  0E29               	movlw	low _segments
  2129  000498  24F3               	addwf	prodl,w,c
  2130  00049A  6ED9               	movwf	fsr2l,c
  2131  00049C  0E00               	movlw	high _segments
  2132  00049E  20F4               	addwfc	prodh,w,c
  2133  0004A0  6EDA               	movwf	fsr2h,c
  2134  0004A2  CFDE F001          	movff	postinc2,??_selectNextSegment
  2135  0004A6  CFDD F002          	movff	postdec2,??_selectNextSegment+1
  2136  0004AA  C001  FFD9         	movff	??_selectNextSegment,fsr2l
  2137  0004AE  C002  FFDA         	movff	??_selectNextSegment+1,fsr2h
  2138  0004B2  C003  FFDF         	movff	selectNextSegment@select,indf2
  2139  0004B6  0012               	return	
  2140  0004B8                     __end_of_selectNextSegment:
  2141                           	opt stack 0
  2142  0000                     pclatu	equ	0xFFB
  2143                           pclath	equ	0xFFA
  2144                           tblptru	equ	0xFF8
  2145                           tblptrh	equ	0xFF7
  2146                           tblptrl	equ	0xFF6
  2147                           tablat	equ	0xFF5
  2148                           prodh	equ	0xFF4
  2149                           prodl	equ	0xFF3
  2150                           intcon	equ	0xFF2
  2151                           intcon2	equ	0xFF1
  2152                           postinc0	equ	0xFEE
  2153                           fsr0h	equ	0xFEA
  2154                           fsr0l	equ	0xFE9
  2155                           wreg	equ	0xFE8
  2156                           plusw1	equ	0xFE3
  2157                           fsr1h	equ	0xFE2
  2158                           fsr1l	equ	0xFE1
  2159                           bsr	equ	0xFE0
  2160                           indf2	equ	0xFDF
  2161                           postinc2	equ	0xFDE
  2162                           postdec2	equ	0xFDD
  2163                           plusw2	equ	0xFDB
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           pclatu	equ	0xFFB
  2168                           pclath	equ	0xFFA
  2169                           tblptru	equ	0xFF8
  2170                           tblptrh	equ	0xFF7
  2171                           tblptrl	equ	0xFF6
  2172                           tablat	equ	0xFF5
  2173                           prodh	equ	0xFF4
  2174                           prodl	equ	0xFF3
  2175                           intcon	equ	0xFF2
  2176                           intcon2	equ	0xFF1
  2177                           postinc0	equ	0xFEE
  2178                           fsr0h	equ	0xFEA
  2179                           fsr0l	equ	0xFE9
  2180                           wreg	equ	0xFE8
  2181                           plusw1	equ	0xFE3
  2182                           fsr1h	equ	0xFE2
  2183                           fsr1l	equ	0xFE1
  2184                           bsr	equ	0xFE0
  2185                           indf2	equ	0xFDF
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193                           	psect	rparam
  2194  0000                     pclatu	equ	0xFFB
  2195                           pclath	equ	0xFFA
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           prodh	equ	0xFF4
  2201                           prodl	equ	0xFF3
  2202                           intcon	equ	0xFF2
  2203                           intcon2	equ	0xFF1
  2204                           postinc0	equ	0xFEE
  2205                           fsr0h	equ	0xFEA
  2206                           fsr0l	equ	0xFE9
  2207                           wreg	equ	0xFE8
  2208                           plusw1	equ	0xFE3
  2209                           fsr1h	equ	0xFE2
  2210                           fsr1l	equ	0xFE1
  2211                           bsr	equ	0xFE0
  2212                           indf2	equ	0xFDF
  2213                           postinc2	equ	0xFDE
  2214                           postdec2	equ	0xFDD
  2215                           plusw2	equ	0xFDB
  2216                           fsr2h	equ	0xFDA
  2217                           fsr2l	equ	0xFD9
  2218                           status	equ	0xFD8
  2219                           
  2220                           	psect	temp
  2221  000041                     btemp:
  2222                           	opt stack 0
  2223  000041                     	ds	1
  2224  0000                     int$flags	set	btemp
  2225                           pclatu	equ	0xFFB
  2226                           pclath	equ	0xFFA
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           intcon	equ	0xFF2
  2234                           intcon2	equ	0xFF1
  2235                           postinc0	equ	0xFEE
  2236                           fsr0h	equ	0xFEA
  2237                           fsr0l	equ	0xFE9
  2238                           wreg	equ	0xFE8
  2239                           plusw1	equ	0xFE3
  2240                           fsr1h	equ	0xFE2
  2241                           fsr1l	equ	0xFE1
  2242                           bsr	equ	0xFE0
  2243                           indf2	equ	0xFDF
  2244                           postinc2	equ	0xFDE
  2245                           postdec2	equ	0xFDD
  2246                           plusw2	equ	0xFDB
  2247                           fsr2h	equ	0xFDA
  2248                           fsr2l	equ	0xFD9
  2249                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     35      64
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    D_SEG_Add@port	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    temp.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    convertValueToSegment@segment.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    convertValueToSegment@segment	PTR struct . size(2) Largest target is 28
		 -> segments(COMRAM[24]), 

    S21$PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 

    segments.PORT	PTR volatile unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR[1]), 


Critical Paths under _main in COMRAM

    _main->_updateScore
    _updateScore->_setSegments
    _setSegments->_D_SEG_Update
    _D_SEG_Update->___awdiv
    _checkInputs->_delay

Critical Paths under _LowInterruptRoutine in COMRAM

    _writeSegment->_selectNextSegment

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowInterruptRoutine in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowInterruptRoutine in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowInterruptRoutine in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowInterruptRoutine in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowInterruptRoutine in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowInterruptRoutine in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowInterruptRoutine in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowInterruptRoutine in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    4505
                          _D_SEG_Add
                         _D_SEG_Init
                        _D_SEG_Start
                       _D_SEG_Update
                        _checkInputs
                    _determineWinner
                        _updateScore
 ---------------------------------------------------------------------------------
 (1) _updateScore                                          2     1      1    2639
                                             33 COMRAM     2     1      1
                        _setSegments
 ---------------------------------------------------------------------------------
 (2) _setSegments                                          2     1      1    2317
                                             31 COMRAM     2     1      1
                       _D_SEG_Update
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4     552
                                             21 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     556
                                             21 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _D_SEG_Update                                         2     1      1     971
                                             29 COMRAM     2     1      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
              _convertValueToSegment
 ---------------------------------------------------------------------------------
 (4) _convertValueToSegment                                3     0      3     393
                                             21 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _determineWinner                                      5     5      0       0
                                             21 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (1) _checkInputs                                          0     0      0     152
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                5     3      2     152
                                             21 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _D_SEG_Start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_SEG_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _D_SEG_Add                                           12     9      3     743
                                             21 COMRAM    12     9      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowInterruptRoutine                                 18    18      0      15
                                              3 COMRAM    18    18      0
                       _writeSegment
 ---------------------------------------------------------------------------------
 (6) _writeSegment                                         0     0      0      15
                  _selectNextSegment
 ---------------------------------------------------------------------------------
 (7) _selectNextSegment                                    3     3      0      15
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _D_SEG_Add
   _D_SEG_Init
   _D_SEG_Start
   _D_SEG_Update
     ___awdiv (ARG)
     ___awmod (ARG)
     _convertValueToSegment (ARG)
   _checkInputs
     _delay
   _determineWinner
   _updateScore
     _setSegments
       _D_SEG_Update
         ___awdiv (ARG)
         ___awmod (ARG)
         _convertValueToSegment (ARG)
       ___awdiv
       ___awmod

 _LowInterruptRoutine (ROOT)
   _writeSegment
     _selectNextSegment

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     23      40       1       68.1%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      40      20        0.0%
DATA                 0      0      40       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Oct  3 21:03:00 2016

                            l27 00D0      __size_of_selectNextSegment 0076                    ___awdiv@sign 001B  
                   __CFG_BOR$ON 000000                              bsr 000FE0                     __CFG_BORV$3 000000  
                  __CFG_CP0$OFF 000000                    __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000  
                  __CFG_CP3$OFF 000000                             l150 060E                             l170 0644  
                  __CFG_CPB$OFF 000000                             u521 0586                    __CFG_CPD$OFF 000000  
                           u577 063C                    ___awmod@sign 001B                             prod 000FF3  
                           wreg 000FE8                    __CFG_FOSC$HS 000000                    __CFG_LVP$OFF 000000  
                  __CFG_WDT$OFF 000000                            l1111 00EA                            l1041 05C4  
                          l1121 0144                            l1113 00FC                            l1201 04F2  
                          l1123 0156                            l1115 010E                            l1131 018C  
                          l1107 00CC                            l1125 0168                            l1117 0120  
                          l1109 00D8                            l1213 051E                            l1205 0506  
                          l1221 02F8                            l1127 017A                            l1119 0132  
                          l1151 0366                            l1305 0622                            l1049 05F6  
                          l1161 0388                            l1145 0356                            l1209 0510  
                          l1225 0332                            l1243 0550                            l1219 02BE  
                          l1237 0536                            l1229 0630                            l1157 037C  
                          l1173 03AE                            l1261 03CE                            l1341 027E  
                          l1159 0384                            l1271 03F2                            l1343 0290  
                          l1335 0266                            l1177 03BC                            l1169 03A4  
                          l1193 04D8                            l1273 03FE                            l1265 03D8  
                          l1345 029C                            l1337 0272                            l1275 0402  
                          l1283 0412                            l1259 03CA                            l1197 04E6  
                          l1189 04CC                            l1285 0426                            l1269 03DE  
                          l1349 02A8                            l1199 04EE                            l1279 040C  
                          l1289 0432                            i1l70 007E                            _main 01CC  
                   ?_D_SEG_Init 0001                            fsr0h 000FEA                            fsr1h 000FE2  
                          fsr0l 000FE9                            fsr2h 000FDA                            fsr1l 000FE1  
                          indf2 000FDF                            fsr2l 000FD9                            btemp 0041  
                          pclat 000FFA                            prodh 000FF4                            prodl 000FF3  
                          start 00C6                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                  ___param_bank 000010                updateScore@which 0023       convertValueToSegment@data 0018  
        ?_convertValueToSegment 0016              __size_of_D_SEG_Add 006A                   __CFG_PLLDIV$5 000000  
                         ?_main 0001                 __end_of___awdiv 03C6                 __end_of___awmod 0528  
               ___awdiv@divisor 0018                           i1l905 0456                           i1l907 0458  
               ___awdiv@counter 001A                           _PORTA 000F80                           _PORTB 000F81  
                 __CFG_USBDIV$1 000000                           _TRISA 000F92                           _TRISB 000F93  
                         _TRISC 000F94            __size_of_checkInputs 002C                   __CFG_PWRT$OFF 000000  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBTRB$OFF 000000                           _delay 0626                    ?_D_SEG_Start 0001  
                         tablat 000FF5                           plusw1 000FE3                           plusw2 000FDB  
                         status 000FD8     __end_of_LowInterruptRoutine 00C6           __size_of_writeSegment 0022  
               __initialization 06BA                    __end_of_main 02BA                          ??_main 0024  
                 __activetblptr 000002             __size_of_D_SEG_Init 0026                 __CFG_CCP2MX$OFF 000000  
                  ?_setSegments 0020                          ?_delay 0016                ___awdiv@dividend 0016  
             __end_of_D_SEG_Add 0592                    _writeSegment 0698                  __CFG_XINST$OFF 000000  
                     ??___awdiv 001A                       ??___awmod 001A                          _change 0024  
                        delay@i 0019                          clear_0 06C0                ___awdiv@quotient 001C  
               ___awmod@divisor 0018                 ___awmod@counter 001A                   ?_D_SEG_Update 001E  
                        tblptrh 000FF7                          tblptrl 000FF6                          tblptru 000FF8  
               _determineWinner 0592                     D_SEG_Add@ID 001A                      __accesstop 0060  
       __end_of__initialization 06C6                 __CFG_PBADEN$OFF 000000                   ___rparam_used 000001  
                  ?_updateScore 0022                  __pcstackCOMRAM 0001                   __end_of_delay 064E  
                ??_D_SEG_Update 001F                         ??_delay 0018                    ??_D_SEG_Init 0016  
          __size_of_D_SEG_Start 0004         ??_convertValueToSegment 0019         __end_of_determineWinner 05FA  
            __end_of_D_SEG_Init 0674                         i1u32_20 006C                         i1u17_24 0482  
                       i1u17_25 047E                         i1u33_28 006E            __size_of_setSegments 0088  
               __CFG_VREGEN$OFF 000000                         __Hparam 0000                         __Lparam 0000  
                       ___awdiv 0342                         ___awmod 04B8                      _currentSeg 0025  
               __CFG_STVREN$OFF 000000                         __pcinit 06BA                         __ramtop 0800  
                 ??_checkInputs 001B                         __ptext0 01CC                         __ptext1 03C6  
                       __ptext2 02BA                         __ptext3 04B8                         __ptext4 0342  
                       __ptext5 0674                         __ptext6 00CA                         __ptext7 0592  
                       __ptext8 05FA                         __ptext9 0626                       _T0CONbits 000FD5  
             D_SEG_Update@value 001E               D_SEG_Update@which 001F                         delay@ms 0016  
              ___awmod@dividend 0016                         _score_1 0026                         _score_2 0027  
          end_of_initialization 06C6                      _segmentCnt 0028                   __Lmediumconst 0000  
          __end_of_D_SEG_Update 0698                       _D_SEG_Add 0528                         postdec2 000FDD  
                       postinc0 000FEE                         postinc2 000FDE            __size_of_updateScore 007C  
  __size_of_LowInterruptRoutine 00AE                       _PORTAbits 000F80                ?_determineWinner 0001  
                     _TRISAbits 000F92             __end_of_checkInputs 0626                  updateScore@how 0022  
  convertValueToSegment@segment 0016                      ?_D_SEG_Add 0016         selectNextSegment@select 0003  
           start_initialization 06BA  __size_of_convertValueToSegment 0102   __end_of_convertValueToSegment 01CC  
              __CFG_LPT1OSC$OFF 000000                     _checkInputs 05FA                      D_SEG_Add@i 001B  
                   __pbssCOMRAM 0024           __size_of_D_SEG_Update 0024                   ??_D_SEG_Start 0016  
                   ??_D_SEG_Add 0019                        ?___awdiv 0016                        ?___awmod 0016  
                   __pintcodelo 0018                    _D_SEG_Update 0674                   ??_setSegments 0021  
                __size_of_delay 0028                   ?_writeSegment 0001             _LowInterruptRoutine 0018  
              D_SEG_Add@portPin 0018             __end_of_D_SEG_Start 06D8                        _RCONbits 000FD0  
              __CFG_WDTPS$32768 000000            ?_LowInterruptRoutine 0001                      _ADCON1bits 000FC1  
                   _INTCON2bits 000FF1                  ??_writeSegment 0004             __end_of_setSegments 0342  
                 ??_updateScore 0023                        __Hrparam 0000                        __Lrparam 0000  
             setSegments@player 0021           ??_LowInterruptRoutine 0004                __size_of___awdiv 0084  
              __size_of___awmod 0070               _selectNextSegment 0442              ?_selectNextSegment 0001  
                      __ptext10 06D4                        __ptext11 064E                        __ptext12 0528  
                      __ptext14 0698                        __ptext15 0442        __size_of_determineWinner 0068  
           ??_selectNextSegment 0001                     _D_SEG_Start 06D4                   __size_of_main 00EE  
                      _segments 0029                        int$flags 0041       __end_of_selectNextSegment 04B8  
           __end_of_updateScore 0442                    ?_checkInputs 0001           __CFG_CPUDIV$OSC1_PLL2 000000  
                    _INTCONbits 000FF2                     _setSegments 02BA                setSegments@value 0020  
                      intlevel1 0000                      _D_SEG_Init 064E           _convertValueToSegment 00CA  
          __end_of_writeSegment 06BA                   D_SEG_Add@temp 001C                   D_SEG_Add@port 0016  
             ??_determineWinner 0016                     _updateScore 03C6  
